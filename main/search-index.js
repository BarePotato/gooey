var searchIndex = JSON.parse('{\
"gooey":{"doc":"","t":[0,0,3,3,8,10,8,10,8,0,8,10,10,10,10,10,10,10,3,12,12,3,12,12,3,12,12,12,12,0,8,10,10,11,0,5,5,0,8,10,8,10,8,10,8,10,8,10,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,12,3,12,12,3,12,12,12,12,3,12,5,5,3,12,12,3,12,12,12,3,12,3,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,3,12,12,3,12,12,12,5,5,3,12,12,3,12,12,12,5,3,12,12,5,3,12,12,3,12,12,3,12,3,12,12,12,12,3,12,12,12,12,5,5,3,12,12,3,12,12,12,3,12,12,3,12,12,12,8,10,10,10,10,10,10,3,3,3,3,8,10,11,8,11,3,12,12,12,12,4,13,13,4,13,13,13,4,13,13,13,8,10,10,3,12,3,12,12,3,12,4,13,13,3,12,3,12,4,13,13,13,4,13,13,13,13,13,13,13,13,13,13,0,8,10,4,13,13,13,13,13,3,12,12,12,12,4,13,13,13,13,13,13,13,13,13,13,3,12,12,3,12,12,8,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,3,3,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,0,6,6,6,6,6,6,8,16,16,3,12,12,6,0,6,6,6,6,6,6,8,16,16,8,16,16,8,10,10,10,3,12,12,12,12,6,0,4,13,13,13,3,12,12,8,10,11,8,11,10,8,11,10,0,0,3,0,3,3,8,18,3,0,3,3,0,8,18,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,8,18,8,10,10,3,3,3,3,0,8,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,8,16,10,8,16,10,11,8,16,10,8,10,10,8,16,10,11,8,16,10,10,8,18,10,10,3,12,12,8,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,6,6,6,6,6,6,6,6,6,6,6,6,3,12,12,12,12,6,3,12,12,12,12,6,8,10,11,10,8,10,10,10,3,8,10,11,11,11,11,11,11,11,11,24,8,10,11,11,11,11,11,11,11,11,24,8,18,11,11,11,11,11,11,11,11,11,24,3,3,6,8,10,10,8,16,3,8,16,16,10,0,3,12,12,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["frontends","renderers","Kludgine","Rasterizer","WidgetRasterizer","render","AnyWidgetRasterizer","render","Frontend","renderer","Renderer","size","scale","render_text","measure_text","stroke_rect","fill_rect","stroke_line","TextOptions","font_family","text_size","StrokeOptions","color","line_width","TextMetrics","width","ascent","descent","line_gap","approxeq","ApproxEq","approx_epsilon","approx_eq_eps","approx_eq","approxord","min","max","num","Zero","zero","One","one","Round","round","Floor","floor","Ceil","ceil","UnknownUnit","default","Length","Point2D","Point3D","Vector2D","Vector3D","HomogeneousVector","Size2D","Size3D","Rect","Box2D","Box3D","SideOffsets2D","Transform2D","Transform3D","Rotation2D","Rotation3D","Translation2D","Translation3D","Scale","RigidTransform3D","Angle","radians","Box2D","min","max","HomogeneousVector","x","y","z","w","Length","0","point2","point3","Point2D","x","y","Point3D","x","y","z","Scale","0","Transform2D","m11","m12","m21","m22","m31","m32","Transform3D","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","bvec2","bvec3","BoolVector2D","x","y","BoolVector3D","x","y","z","vec2","vec3","Vector2D","x","y","Vector3D","x","y","z","box3d","Box3D","min","max","rect","Rect","origin","size","RigidTransform3D","rotation","translation","Rotation2D","angle","Rotation3D","i","j","k","r","SideOffsets2D","top","right","bottom","left","size2","size3","Size2D","width","height","Size3D","width","height","depth","Translation2D","x","y","Translation3D","x","y","z","Trig","sin","cos","tan","fast_atan2","degrees_to_radians","radians_to_degrees","Pixels","Points","Style","ComponentCollection","StyleComponent","scale","should_be_inherited","UnscaledStyleComponent","unscaled_should_be_inherited","StyleSheet","normal","hover","focus","active","GenericStyle","Points","Pixels","Alignment","Left","Center","Right","VerticalAlignment","Top","Center","Bottom","AnyStyleComponent","as_any","clone_to_style_component","BackgroundColor","0","ColorPair","light_color","dark_color","ForegroundColor","0","SystemTheme","Light","Dark","FontFamily","0","FontSize","0","FontStyle","Regular","Italic","Oblique","Weight","Thin","ExtraLight","Light","Normal","Medium","SemiBold","Bold","ExtraBold","Black","Other","blend","BlendFunction","apply_to","Equation","Add","Subtract","ReverseSubtract","Min","Max","Equations","color_equation","alpha_equation","color_parameters","alpha_parameters","Parameter","One","Zero","SourceColor","OneMinusSourceColor","DestinationColor","OneMinusDestinationColor","SourceAlpha","OneMinusSourceAlpha","DestinationAlpha","OneMinusDestinationAlpha","Parameters","source","destination","PreAlpha","color","alpha","Blend","Color","into_premultiplied","from_premultiplied","blend","over","inside","outside","atop","xor","plus","multiply","screen","overlay","darken","lighten","dodge","burn","hard_light","soft_light","difference","exclusion","gradient","Gradient","Take","Slice","Range","named","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","from_str","luma","SrgbLuma","SrgbLumaa","LinLuma","LinLumaa","GammaLuma","GammaLumaa","LumaStandard","WhitePoint","TransferFn","Luma","luma","standard","Lumaa","rgb","Srgb","Srgba","LinSrgb","LinSrgba","GammaSrgb","GammaSrgba","RgbStandard","Space","TransferFn","RgbSpace","Primaries","WhitePoint","Primaries","red","green","blue","Rgb","red","green","blue","standard","Rgba","chromatic_adaptation","Method","Bradford","VonKries","XyzScaling","ConeResponseMatrices","ma","inv_ma","TransformMatrix","get_cone_response","generate_transform_matrix","AdaptFrom","adapt_from","adapt_from_using","AdaptInto","adapt_into","adapt_into_using","encoding","srgb","Srgb","gamma","Gamma","GammaFn","Number","VALUE","F2p2","linear","Linear","LinearFn","pixel","Pixel","CHANNELS","as_raw","as_raw_mut","into_raw","from_raw","from_raw_mut","from_raw_slice","from_raw_slice_mut","into_raw_slice","into_raw_slice_mut","RawPixel","channels","from_raw_parts","from_raw_parts_mut","as_ptr","as_mut_ptr","RawPixelSized","CHANNELS","TransferFn","from_linear","into_linear","Srgb","F2p2","Gamma","Linear","white_point","WhitePoint","get_xyz","A","B","C","D50","D55","D65","D75","E","F2","F7","F11","D50Degree10","D55Degree10","D65Degree10","D75Degree10","float","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","Limited","is_valid","clamp","clamp_self","Mix","Scalar","mix","Shade","Scalar","lighten","darken","GetHue","Hue","get_hue","Hue","with_hue","shift_hue","Saturate","Scalar","saturate","desaturate","ComponentWise","Scalar","component_wise","component_wise_self","Component","LIMITED","max_intensity","convert","Alpha","color","alpha","Blend","Color","into_premultiplied","from_premultiplied","blend","over","inside","outside","atop","xor","plus","multiply","screen","overlay","darken","lighten","dodge","burn","hard_light","soft_light","difference","exclusion","Gradient","Hsl","hue","saturation","lightness","space","Hsla","Hsv","hue","saturation","value","space","Hsva","Hwb","hue","whiteness","blackness","space","Hwba","Lab","l","a","b","white_point","Laba","Lch","l","chroma","hue","white_point","Lcha","GammaLuma","GammaLumaa","LinLuma","LinLumaa","SrgbLuma","SrgbLumaa","GammaSrgb","GammaSrgba","LinSrgb","LinSrgba","Srgb","Srgba","Xyz","x","y","z","white_point","Xyza","Yxy","x","y","luma","white_point","Yxya","ConvertFrom","convert_from","convert_unclamped_from","try_convert_from","ConvertInto","convert_into","convert_unclamped_into","try_convert_into","OutOfBounds","FromColor","from_xyz","from_yxy","from_lab","from_lch","from_rgb","from_hsl","from_hsv","from_hwb","from_luma","FromColor","IntoColor","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_hwb","into_luma","IntoColor","Pixel","CHANNELS","as_raw","as_raw_mut","into_raw","from_raw","from_raw_mut","from_raw_slice","from_raw_slice_mut","into_raw_slice","into_raw_slice_mut","Pixel","LabHue","RgbHue","Mat3","AnyWidget","as_any","widget_type_id","Widget","TransmogrifierEvent","Gooey","Transmogrifier","Widget","Context","content_size","button","Button","label","disabled","ButtonEvent","Clicked","ButtonTransmogrifier","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","pixel_rounded","pixel_expanded","pixel_constrained","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","pixel_rounded","pixel_expanded","pixel_constrained","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","pixel_rounded","pixel_expanded","pixel_constrained","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","pixel_rounded","pixel_expanded","pixel_constrained","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","pixel_rounded","pixel_expanded","pixel_constrained","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","pixel_rounded","pixel_expanded","pixel_constrained","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","get_hash","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","clone_to_style_component","scale","scale","should_be_inherited","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","convert_from","try_convert_from","downcast","upcast","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","widget_type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","equivalent","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","render","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","render","content_size","mul","div","default","zero","zero","zero","zero","zero","zero","zero","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","approx_epsilon","approx_eq_eps","eq","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","round","round","round","round","round","round","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","partial_cmp","partial_cmp","partial_cmp","partial_cmp","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","ceil","ceil","ceil","ceil","ceil","ceil","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","one","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","cmp","cmp","cmp","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","saturating_add","saturating_sub","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","default","default","default","default","default","default","default","default","default","default","default","default","default","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","scale","scale","from","from","from","from","from","eq","ne","eq","eq","eq","unscaled_should_be_inherited","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","apply_to","into_linear","from_linear","into_linear","from_linear","into_linear","from_linear","from_xyz","from_hsv","from_hwb","from_xyz","from_hsv","from_hsl","from_luma","from_rgb","from_xyz","from_lab","from_lch","from_xyz","from_rgb","from_lab","from_yxy","from_luma","from_xyz","from_rgb","from_hsv","from_hsl","from_xyz","from_yxy","from_luma","from_xyz","from_yxy","from_luma","from_xyz","from_lab","from_lch","from_xyz","from_rgb","from_hsl","from_hwb","from_hsv","fmt","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","description","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","saturate","saturate","saturate","saturate","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","next","size_hint","fmt","fmt","fmt","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","into_premultiplied","from_premultiplied","into_premultiplied","from_premultiplied","into_premultiplied","from_premultiplied","into_premultiplied","from_premultiplied","fmt","fmt","fmt","with_hue","shift_hue","with_hue","shift_hue","with_hue","shift_hue","with_hue","shift_hue","with_hue","shift_hue","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_hwb","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","deref_mut","deref_mut","red","green","blue","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","ne","eq","eq","ne","eq","eq","eq","ne","eq","eq","ne","eq","eq","ne","eq","eq","eq","ne","eq","eq","eq","ne","eq","eq","get_cone_response","default","default","default","default","default","default","default","default","default","default","default","default","default","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","div","div","div","div","div","div","div","div","div","div","div","div","div","div","deref","deref","eq","ne","clone","from","size","scale","render_text","measure_text","stroke_rect","fill_rect","stroke_line","width","height","set_width","set_height","x","y","set_x","set_y","x","y","set_x","set_y","from","from","position","transform_point","transform_vector","transform_point","transform_vector","transform_point","transform_vector","transform_point","transform_vector","new","render","register_transmogrifier","transmogrifier","root_transmogrifier","height","line_height","radians","get","degrees","to_degrees","positive","signed","angle_to","lerp","sin_cos","zero","pi","two_pi","frac_pi_2","frac_pi_3","frac_pi_4","cast","try_cast","to_f32","to_f64","new","is_negative","is_empty","intersects","contains","contains_box","to_non_empty","intersection","intersection_unchecked","union","translate","size","width","height","to_rect","inflate","inner_box","outer_box","from_size","from_points","lerp","center","area","zero","to_untyped","from_untyped","cast_unit","scale","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","round","round_in","round_out","new","to_point2d","to_point3d","new","get","cast_unit","lerp","min","max","cast","try_cast","origin","zero","new","from_lengths","splat","from_untyped","extend","to_vector","yx","to_untyped","cast_unit","to_array","to_tuple","to_3d","round","ceil","floor","lerp","min","max","clamp","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","add_size","distance_to","origin","zero","new","from_lengths","splat","from_untyped","to_vector","xy","xz","yz","to_array","to_array_4d","to_tuple","to_tuple_4d","to_untyped","cast_unit","to_2d","round","ceil","floor","lerp","min","max","clamp","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","add_size","distance_to","new","identity","transform_point","transform_point3d","transform_vector","transform_size","transform_rect","transform_box2d","transform_box3d","is_identity","get","inverse","cast","try_cast","new","approx_eq","approx_eq_eps","to_array","to_array_transposed","to_arrays","from_array","from_arrays","to_untyped","from_untyped","with_source","with_destination","to_3d","cast","try_cast","identity","then","translation","then_translate","pre_translate","rotation","then_rotate","pre_rotate","scale","then_scale","pre_scale","transform_point","transform_vector","outer_transformed_rect","outer_transformed_box","determinant","is_invertible","inverse","new","new_2d","is_2d","to_array","to_array_transposed","to_arrays","to_arrays_transposed","from_array","from_arrays","from_untyped","to_untyped","with_source","with_destination","to_2d","identity","skew","perspective","then","translation","pre_translate","then_translate","rotation","then_rotate","pre_rotate","scale","pre_scale","then_scale","transform_point2d_homogeneous","transform_point2d","transform_vector2d","transform_point3d_homogeneous","transform_point3d","transform_vector3d","outer_transformed_rect","outer_transformed_box2d","outer_transformed_box3d","ortho","is_backface_visible","is_invertible","inverse","determinant","mul_s","from_scale","project_to_2d","cast","try_cast","approx_eq","approx_eq_eps","all","any","none","and","or","not","select_point","select_vector","select_size","all","any","none","and","or","not","select_point","select_vector","select_size","xy","xz","yz","zero","one","new","splat","from_angle_and_length","from_lengths","from_untyped","abs","dot","cross","component_mul","extend","to_point","yx","to_size","to_untyped","cast_unit","to_array","to_tuple","to_3d","round","ceil","floor","angle_from_x_axis","to_transform","square_length","project_onto_vector","angle_to","length","normalize","try_normalize","robust_normalize","with_max_length","with_min_length","clamp_length","lerp","reflect","min","max","clamp","greater_than","lower_than","equal","not_equal","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","zero","one","new","splat","from_lengths","from_untyped","abs","dot","cross","component_mul","to_point","xy","xz","yz","to_array","to_array_4d","to_tuple","to_tuple_4d","to_untyped","cast_unit","to_2d","round","ceil","floor","to_transform","square_length","project_onto_vector","angle_to","length","normalize","try_normalize","robust_normalize","with_max_length","with_min_length","clamp_length","lerp","reflect","min","max","clamp","greater_than","lower_than","equal","not_equal","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","new","is_negative","is_empty","intersects","contains","contains_box","to_non_empty","intersection","intersection_unchecked","union","translate","size","width","height","depth","inflate","from_size","from_points","lerp","center","volume","xy_area","yz_area","xz_area","zero","to_untyped","from_untyped","cast_unit","scale","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","round","round_in","round_out","new","zero","from_size","min","max","max_x","min_x","max_y","min_y","width","height","x_range","y_range","translate","to_box2d","contains","intersects","intersection","inflate","contains_rect","inner_rect","outer_rect","from_points","lerp","center","union","scale","area","is_empty","to_non_empty","to_untyped","from_untyped","cast_unit","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_u64","to_i32","to_i64","round","round_in","round_out","new","cast_unit","identity","new_from_reversed","from_rotation","from_translation","decompose_reversed","then","inverse","to_transform","to_untyped","from_untyped","new","radians","identity","cast_unit","to_untyped","from_untyped","get_angle","to_3d","inverse","then","transform_point","transform_vector","to_transform","quaternion","identity","vector_part","cast_unit","to_untyped","from_untyped","unit_quaternion","around_axis","around_x","around_y","around_z","euler","inverse","norm","square_norm","normalize","is_normalized","slerp","lerp","transform_point3d","transform_point2d","transform_vector3d","transform_vector2d","to_transform","then","new","from_lengths","from_vectors_outer","from_vectors_inner","zero","is_zero","new_all_same","from_length_all_same","horizontal","vertical","zero","new","from_lengths","splat","from_untyped","to_array","to_tuple","to_vector","to_untyped","cast_unit","round","ceil","floor","area","lerp","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_u64","to_i32","to_i64","abs","is_positive","min","max","clamp","contains","greater_than","lower_than","is_empty","equal","not_equal","zero","new","from_lengths","splat","from_untyped","to_array","to_tuple","to_vector","to_untyped","cast_unit","round","ceil","floor","volume","lerp","cast","try_cast","to_f32","to_f64","to_usize","to_u32","to_i32","to_i64","abs","is_positive","min","max","clamp","contains","greater_than","lower_than","is_empty","equal","not_equal","new","splat","identity","is_identity","transform_size","to_vector","to_array","to_tuple","to_untyped","from_untyped","to_transform","transform_point","transform_rect","transform_box","inverse","new","splat","identity","is_identity","transform_size","to_vector","to_array","to_tuple","to_untyped","from_untyped","to_transform","transform_point3d","transform_point2d","transform_box2d","transform_box3d","transform_rect","inverse","new","push","with","get","get_or_default","merge_with","to_screen_scale","push","merge_with","map_each","get","with_alpha","themed_color","new","get","length","to_number","from_equations","from_parameters","new","with_domain","get","take","slice","domain","get","take","slice","domain","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","color","from_degrees","from_radians","to_degrees","to_radians","to_positive_degrees","to_positive_radians","to_raw_degrees","to_raw_radians","from_degrees","from_radians","to_degrees","to_radians","to_positive_degrees","to_positive_radians","to_raw_degrees","to_raw_radians","new","root_widget"],"q":["gooey","gooey::frontends","gooey::frontends::renderers::kludgine","gooey::frontends::rasterizer","","","","","gooey::core","","gooey::core::renderer","","","","","","","","","","","","","","","","","","","gooey::core::euclid","gooey::core::euclid::approxeq","","","","gooey::core::euclid","gooey::core::euclid::approxord","","gooey::core::euclid","gooey::core::euclid::num","","","","","","","","","","gooey::core::euclid","","gooey::core::euclid::default","","","","","","","","","","","","","","","","","","","","gooey::core::euclid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::gradient","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::named","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::chromatic_adaptation","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::encoding::srgb","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::encoding::gamma","","","","","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::encoding::linear","","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::encoding::pixel","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::encoding","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core","","","","","","","","","","gooey::widgets","gooey::widgets::button","","","","","","gooey::frontends::renderers::kludgine","","","","","","","","","","","","","","","","","gooey::frontends::rasterizer","","","","","","","","","","","","","","","","","gooey::core::renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::euclidgooey::core::stylecsgooey::core::stylecs::palette::blend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::gradient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::chromatic_adaptation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::encoding::gamma","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::encoding::linear","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::white_pointgooey::core::stylecs::palettegooey::core","","","","","","","","","","","","","","","","","gooey::widgets::button","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::renderer","","","gooey::core::euclidgooey::core::stylecs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::encoding::linear","","gooey::core::stylecs::palette::encoding::gamma","","gooey::core::stylecs::palette::encoding","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","","","","","gooey::core::stylecs::palette","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","","","gooey::core::stylecs::palette","","","","","","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","","","gooey::core::stylecs::palette","","","","","","","","","gooey::core::stylecs::palette::rgb","","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","","","","","","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::gradient","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette::gradient","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","","","","","","","","","","","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::gradient","","gooey::core::stylecs::palette","","","","","","","","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::white_point","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::encoding::gamma","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::encoding::linear","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::luma","","","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::rgb","","","","","","","","","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::encoding","","","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette","","","","","","","","","","gooey::core::stylecs::palette::gradient","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","","","","","","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::white_point","","","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::encoding","","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette::encoding::gamma","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","","","","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::gradient","","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::encoding","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::encoding::linear","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette::chromatic_adaptation","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","","","","","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::encoding::linear","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::gradient","gooey::core::stylecs::palette::white_point","","","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::encoding::gamma","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::white_point","","gooey::core::stylecs::palette","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette::encoding","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::white_point","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::luma","","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::rgb","","gooey::core::stylecs::palette","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","","","","","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette","gooey::core::stylecs::palette::luma","gooey::core::stylecs::palette::rgb","gooey::core::stylecs::palette::blend","gooey::core::stylecs::palette","","","gooey::core::stylecs::palette::blend","gooey::widgets::button","","","gooey::frontends::renderers::kludgine","","","","","","","","gooey::core::euclid","","","","","","","","","","","","gooey::core::stylecs::palette","gooey::core::stylecs","gooey::core::euclid","","","","","","","","","gooey::frontends::rasterizer","","","","","gooey::core::renderer","","gooey::core::euclid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core::stylecs","","","","","","","","","","","","","","","","","gooey::core::stylecs::palette::blend","","gooey::core::stylecs::palette","","","","","","gooey::core::stylecs::palette::gradient","","","","gooey::core::stylecs::palette::luma","","","","","","","","","gooey::core::stylecs::palette::rgb","","","","","","","","","gooey::core::stylecs::palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey::core",""],"d":["","","","","","","","","A frontend is an implementation of widgets and layouts.","Types used for drawing.","Implements drawing APIs.","The size of the area being drawn.","The scale when converting between [<code>Points</code>] and [<code>Pixels</code>].","Renders <code>text</code> at <code>baseline_origin</code> with <code>options</code>.","Measures <code>text</code> using <code>options</code>.","Strokes the outline of <code>rect</code> using <code>options</code>.","Fills <code>rect</code> using <code>color</code>.","Draws a line between <code>point_a</code> and <code>point_b</code> using <code>options</code>.","Text rendering and measurement options.","The font family to use.","The text size, in [<code>Points</code>].","Shape outline drawing options.","The color to stroke.","The width of each line segment.","A measurement of text.","The width of the text.","The height above the baseline.","The height below the baseline. Typically a negative …","The spacing expected between lines of text.","","Trait for testing approximate equality","Default epsilon value","Returns <code>true</code> is this object is approximately equal to the …","Returns <code>true</code> is this object is approximately equal to the …","Utilities for testing approximate ordering - especially …","","","A one-dimensional length, tagged with its units.","","","","","Defines the nearest integer value to the original value.","Rounds to the nearest integer value.","Defines the biggest integer equal or lower than the …","Rounds to the biggest integer equal or lower than the …","Defines the smallest integer equal or greater than the …","Rounds to the smallest integer equal or greater than the …","The default unit.","A set of aliases for all types, tagged with the default …","","","","","","","","","","","","","","","","","","","","","An angle in radians","","A 2d axis aligned rectangle represented by its minimum …","","","Homogeneous vector in 3D space.","","","","","A one-dimensional distance, with value represented by <code>T</code> …","","Shorthand for <code>Point2D::new(x, y)</code>.","Shorthand for <code>Point3D::new(x, y)</code>.","A 2d Point tagged with a unit.","","","A 3d Point tagged with a unit.","","","","A scaling factor between two different units of …","","A 2d transform represented by a column-major 3 by 3 …","","","","","","","A 3d transform stored as a column-major 4 by 4 matrix.","","","","","","","","","","","","","","","","","Shorthand for <code>BoolVector2D { x, y }</code>.","Shorthand for <code>BoolVector3D { x, y, z }</code>.","A 2d vector of booleans, useful for component-wise logic …","","","A 3d vector of booleans, useful for component-wise logic …","","","","Convenience constructor.","Convenience constructor.","A 2d Vector tagged with a unit.","The <code>x</code> (traditionally, horizontal) coordinate.","The <code>y</code> (traditionally, vertical) coordinate.","A 3d Vector tagged with a unit.","The <code>x</code> (traditionally, horizontal) coordinate.","The <code>y</code> (traditionally, vertical) coordinate.","The <code>z</code> (traditionally, depth) coordinate.","Shorthand for …","An axis aligned 3D box represented by its minimum and …","","","Shorthand for …","A 2d Rectangle optionally tagged with a unit.","","","A rigid transformation. All lengths are preserved under …","","","A transform that can represent rotations in 2d, …","Angle in radians","A transform that can represent rotations in 3d, …","Component multiplied by the imaginary number <code>i</code>.","Component multiplied by the imaginary number <code>j</code>.","Component multiplied by the imaginary number <code>k</code>.","The real part.","A group of 2D side offsets, which correspond to …","","","","","Shorthand for <code>Size2D::new(w, h)</code>.","Shorthand for <code>Size3D::new(w, h, d)</code>.","A 2d size tagged with a unit.","The extent of the element in the <code>U</code> units along the <code>x</code> axis …","The extent of the element in the <code>U</code> units along the <code>y</code> axis …","A 3d size tagged with a unit.","The extent of the element in the <code>U</code> units along the <code>x</code> axis.","The extent of the element in the <code>U</code> units along the <code>y</code> axis.","The extent of the element in the <code>U</code> units along the <code>z</code> axis.","A 2d transformation from a space to another that can only …","","","A 3d transformation from a space to another that can only …","","","","Trait for basic trigonometry functions, so they can be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Color blending and blending equations.","A trait for custom blend functions.","Apply this blend function to a pair of colors.","A blending equation.","Add the source and destination, according to …","Subtract the destination from the source, according to …","Subtract the source from the destination, according to …","Create a color where each component is the smallest of …","Create a color where each component is the largest of …","A pair of blending equations and corresponding parameters.","The equation for the color components.","The equation for the alpha component.","The parameters for the color components.","The parameters for the alpha component.","A blending parameter.","A simple 1.","A simple 0.","The source color, or alpha.","One minus the source color, or alpha.","The destination color, or alpha.","One minus the destination color, or alpha.","The source alpha.","One minus the source alpha.","The destination alpha.","One minus the destination alpha.","A pair of source and destination parameters.","The source parameter.","The destination parameter.","Premultiplied alpha wrapper.","The premultiplied color components (…","The transparency component. 0.0 is fully transparent and …","A trait for colors that can be blended together.","The core color type. Typically <code>Self</code> for color types …","Convert the color to premultiplied alpha.","Convert the color from premultiplied alpha.","Blend self, as the source color, with <code>destination</code>, using …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that lies outside the …","Place <code>self</code> over only the visible parts of <code>other</code>.","Results in either <code>self</code> or <code>other</code>, where they do not …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Similar to <code>difference</code>, but appears to result in a lower …","Types for interpolation between multiple colors.","A linear interpolation between colors.","An iterator over interpolated colors.","A slice of a Gradient that limits its domain.","A domain range for gradient slices.","A collection of named color constants. Can be toggled …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a SVG/CSS3 color by name. Can be toggled with the …","Luminance types.","sRGB encoded luminance.","sRGB encoded luminance with an alpha component.","Linear luminance.","Linear luminance with an alpha component.","Gamma 2.2 encoded luminance.","Gamma 2.2 encoded luminance with an alpha component.","A white point and a transfer function.","The white point of the color space.","The transfer function for the luminance component.","Luminance.","The lightness of the color. 0.0 is black and 1.0 is white.","The kind of RGB standard. sRGB is the default.","Luminance with an alpha component. See the <code>Lumaa</code> …","RGB types, spaces and standards.","Nonlinear sRGB.","Nonlinear sRGB with an alpha component.","Linear sRGB.","Linear sRGB with an alpha component.","Gamma 2.2 encoded sRGB.","Gamma 2.2 encoded sRGB with an alpha component.","An RGB space and a transfer function.","The RGB color space.","The transfer function for the color components.","A set of primaries and a white point.","The primaries of the RGB color space.","The white point of the RGB color space.","Represents the red, green and blue primaries of an RGB …","Primary red.","Primary green.","Primary blue.","Generic RGB.","The amount of red light, where 0.0 is no red light and …","The amount of green light, where 0.0 is no green light …","The amount of blue light, where 0.0 is no blue light and …","The kind of RGB standard. sRGB is the default.","Generic RGB with an alpha component. See the <code>Rgba</code> …","Convert colors from one reference white point to another","Chromatic adaptation methods implemented in the library","Bradford chromatic adaptation method","VonKries chromatic adaptation method","XyzScaling chromatic adaptation method","Holds the matrix coeffecients for the chromatic …","3x3 matrix for the cone response domains","3x3 matrix for the inverse of the cone response domains","Generates a conversion matrix to convert the Xyz …","Get the cone response functions for the chromatic …","Generates a 3x3 transformation matrix to convert color …","Trait to convert color from one reference white point to …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Trait to convert color with one reference white point …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Various encoding traits, types and standards.","The sRGB standard.","The sRGB color space.","Gamma encoding.","Gamma encoding.","The transfer function for gamma encoded colors.","A type level float constant.","The represented number.","Represents <code>2.2f32</code>.","Linear encoding","A generic standard with linear components.","Linear color component encoding.","Pixel encodings and pixel format conversion.","Represents colors that can be serialized and deserialized …","The number of color channels.","Cast as a reference to raw color components.","Cast as a mutable reference to raw color components.","Convert from raw color components.","Cast from a reference to raw color components.","Cast from a mutable reference to raw color components.","Cast a slice of raw color components to a slice of colors.","Cast a mutable slice of raw color components to a mutable …","Cast a slice of colors to a slice of raw color components.","Cast a mutable slice of colors to a mutable slice of raw …","A contiguous sequence of pixel channels.","The length of the sequence.","Convert from a pointer and a length.","Convert from a mutable pointer and a length.","Convert to a pointer.","Convert to a mutable pointer.","A contiguous sequence of pixel channels with a known …","The guaranteed number of channels in the sequence.","A transfer function to and from linear space.","Convert the color component <code>x</code> from linear space.","Convert the color component <code>x</code> into linear space.","The sRGB color space.","Represents <code>2.2f32</code>.","Gamma encoding.","A generic standard with linear components.","Defines the tristimulus values of the CIE Illuminants.","WhitePoint defines the Xyz color co-ordinates for a given …","Get the Xyz chromacity co-ordinates for the white point.","CIE standard illuminant A","CIE standard illuminant B","CIE standard illuminant C","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","CIE standard illuminant E","CIE fluorescent illuminant series - F2","CIE fluorescent illuminant series - F7","CIE fluorescent illuminant series - F11","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","Floating point trait","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","A trait for clamping and checking if colors are within …","Check if the color’s components are within the expected …","Return a new color where the components has been clamped …","Clamp the color’s components to the nearest valid …","A trait for linear color interpolation.","The type of the mixing factor.","Mix the color with an other color, by <code>factor</code>.","The <code>Shade</code> trait allows a color to be lightened or …","The type of the lighten/darken amount.","Lighten the color by <code>amount</code>.","Darken the color by <code>amount</code>.","A trait for colors where a hue may be calculated.","The kind of hue unit this color space uses.","Calculate a hue if possible.","A trait for colors where the hue can be manipulated …","Return a new copy of <code>self</code>, but with a specific hue.","Return a new copy of <code>self</code>, but with the hue shifted by …","A trait for colors where the saturation (or chroma) can …","The type of the (de)saturation factor.","Increase the saturation by <code>factor</code>.","Decrease the saturation by <code>factor</code>.","Perform a unary or binary operation on each component of …","The scalar type for color components.","Perform a binary operation on this and an other color.","Perform a unary operation on this color.","Common trait for color components.","True if the max intensity is also the highest possible …","The highest displayable value this component type can …","Convert into another color component type, including …","An alpha component wrapper for colors.","The color.","The transparency component. 0.0 is fully transparent and …","A trait for colors that can be blended together.","The core color type. Typically <code>Self</code> for color types …","Convert the color to premultiplied alpha.","Convert the color from premultiplied alpha.","Blend self, as the source color, with <code>destination</code>, using …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that lies outside the …","Place <code>self</code> over only the visible parts of <code>other</code>.","Results in either <code>self</code> or <code>other</code>, where they do not …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Similar to <code>difference</code>, but appears to result in a lower …","A linear interpolation between colors.","Linear HSL color space.","The hue of the color, in degrees. Decides if it’s red, …","The colorfulness of the color. 0.0 gives gray scale …","Decides how light the color will look. 0.0 will be black, …","The white point and RGB primaries this color is adapted …","Linear HSL with an alpha component. See the <code>Hsla</code> …","Linear HSV color space.","The hue of the color, in degrees. Decides if it’s red, …","The colorfulness of the color. 0.0 gives gray scale …","Decides how bright the color will look. 0.0 will be …","The white point and RGB primaries this color is adapted …","Linear HSV with an alpha component. See the <code>Hsva</code> …","Linear HWB color space.","The hue of the color, in degrees. Decides if it’s red, …","The whiteness of the color. It specifies the amount white …","The blackness of the color. It specifies the amount black …","The white point and RGB primaries this color is adapted …","Linear HWB with an alpha component. See the <code>Hwba</code> …","The CIE L*a*b* (CIELAB) color space.","L* is the lightness of the color. 0.0 gives absolute …","a* goes from red at -128 to green at 127.","b* goes from yellow at -128 to blue at 127.","The white point associated with the color’s illuminant …","CIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …","CIE L*C*h°, a polar version of CIE L*a*b*.","L* is the lightness of the color. 0.0 gives absolute …","C* is the colorfulness of the color. It’s similar to …","The hue of the color, in degrees. Decides if it’s red, …","The white point associated with the color’s illuminant …","CIE L*C*h° with an alpha component. See the <code>Lcha</code> …","Gamma 2.2 encoded luminance.","Gamma 2.2 encoded luminance with an alpha component.","Linear luminance.","Linear luminance with an alpha component.","sRGB encoded luminance.","sRGB encoded luminance with an alpha component.","Gamma 2.2 encoded sRGB.","Gamma 2.2 encoded sRGB with an alpha component.","Linear sRGB.","Linear sRGB with an alpha component.","Nonlinear sRGB.","Nonlinear sRGB with an alpha component.","The CIE 1931 XYZ color space.","X is the scale of what can be seen as a response curve …","Y is the luminance of the color, where 0.0 is black and …","Z is the scale of what can be seen as the blue …","The white point associated with the color’s illuminant …","CIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …","The CIE 1931 Yxy (xyY)  color space.","x chromacity co-ordinate derived from XYZ color space as …","y chromacity co-ordinate derived from XYZ color space as …","luma (Y) was a measure of the brightness or luminance of …","The white point associated with the color’s illuminant …","CIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …","A trait for converting one color from another.","Convert from T with values clamped to the color defined …","Convert from T. The resulting color might be invalid in …","Convert from T, returning ok if the color is inside of …","A trait for converting a color into another.","Convert into T with values clamped to the color defined …","Convert into T. The resulting color might be invalid in …","Convert into T, returning ok if the color is inside of …","The error type for a color conversion that converted a …","FromColor provides conversion from the colors.","Convert from XYZ color space","Convert from Yxy color space","Convert from L*a*b* color space","Convert from L*C*h° color space","Convert from RGB color space","Convert from HSL color space","Convert from HSV color space","Convert from HWB color space","Convert from Luma","","IntoColor provides conversion to the colors.","Convert into XYZ space","Convert into Yxy color space","Convert into L*a*b* color space","Convert into L*C*h° color space","Convert into RGB color space.","Convert into HSL color space","Convert into HSV color space","Convert into HWB color space","Convert into Luma","","Represents colors that can be serialized and deserialized …","The number of color channels.","Cast as a reference to raw color components.","Cast as a mutable reference to raw color components.","Convert from raw color components.","Cast from a reference to raw color components.","Cast from a mutable reference to raw color components.","Cast a slice of raw color components to a slice of colors.","Cast a mutable slice of raw color components to a mutable …","Cast a slice of colors to a slice of raw color components.","Cast a mutable slice of colors to a mutable slice of raw …","","A hue type for the CIE L*a*b* family of color spaces.","A hue type for the RGB family of color spaces.","A 9 element array representing a 3x3 matrix","A Widget without any associated types. Useful for …","Returns the widget as the [<code>Any</code>] type.","Returns the [<code>TypeId</code>] of the widget.","A graphical user interface element.","The type of the event that any [<code>Transmogrifier</code>] for this …","A graphical user interface.","Transforms a Widget into whatever is needed for [<code>Frontend</code>]…","The type of the widget being transmogrified.","The frontend-specific context type provided to aide in …","Calculate the content-size needed for this <code>widget</code>, trying …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructor, setting all components to zero.","Constructor, setting all components to zero.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true is this transform is approximately equal to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See <code>Vector3D::round()</code>","See Point3D::round()","See <code>Vector2D::round()</code>","See <code>Size2D::round()</code>.","See Point2D::round()","See <code>Size3D::round()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the identity transform.","","","","","","Returns the identity transform.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See <code>Vector3D::ceil()</code>","See Point2D::ceil()","See <code>Size3D::ceil()</code>.","See <code>Size2D::ceil()</code>.","See Point3D::ceil()","See <code>Vector2D::ceil()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See Point3D::floor()","See <code>Size2D::floor()</code>.","See Point2D::floor()","See <code>Vector3D::floor()</code>","See <code>Vector2D::floor()</code>","See <code>Size3D::floor()</codeonvert to a raw pixel format.","Convert to a raw pixel formatonvert to a raw pixel format.","","Convert to a raw pixel format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The height of the rendered text. This is computed by …","The height of a line of text. This is computed by …","","","","","Returns this angle in the [0..2*PI[ range.","Returns this angle in the ]-PI..PI] range.","Returns the shortest signed angle between two angles.","Linear interpolation between two angles, using the …","Returns (sin(self), cos(self)).","","","","","","","Cast from one numeric representation to another.","Fallible cast from one numeric representation to another.","Cast angle to <code>f32</code>.","Cast angle <code>f64</code>.","Constructor.","Returns true if the box has a negative area.","Returns true if the size is zero, negative or NaN.","Returns <code>true</code> if the two boxes intersect.","Returns <code>true</code> if this box contains the point. Points are …","Returns <code>true</code> if this box contains the interior of the …","","Computes the intersection of two boxes, returning <code>None</code> if …","Computes the intersection of two boxes without check …","","Returns the same box, translated by a vector.","","","","","Inflates the box by the specified sizes on each side …","Calculate the size and position of an inner box.","Calculate the b and position of an outer box.","Creates a Box2D of the given size, at offset zero.","Returns the smallest box containing all of the provided …","Linearly interpolate between this box and another box.","","","Constructor, setting all sides to zero.","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Cast the unit","","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> box.","Cast into an <code>f64</code> box.","Cast into an <code>usize</code> box, truncating decimals if any.","Cast into an <code>u32</code> box, truncating decimals if any.","Cast into an <code>i32</code> box, truncating decimals if any.","Cast into an <code>i64</code> box, truncating decimals if any.","Return a box with edges rounded to integer coordinates, …","Return a box with faces/edges rounded to integer …","Return a box with faces/edges rounded to integer …","Constructor taking scalar values directly.","Convert into Cartesian 2D point.","Convert into Cartesian 3D point.","Associate a value with a unit of measure.","Unpack the underlying value from the wrapper.","Cast the unit","Linearly interpolate between this length and another …","Returns minimum between this length and another length.","Returns maximum between this length and another length.","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Constructor, setting all components to zero.","The same as <code>origin()</code>.","Constructor taking scalar values directly.","Constructor taking properly Lengths instead of scalar …","Constructor setting all components to the same value.","Tag a unitless value with units.","Create a 3d point from this one, using the specified z …","Cast this point into a vector.","Swap x and y.","Drop the units, preserving only the numeric value.","Cast the unit, preserving the numeric value.","Cast into an array with x and y.","Cast into a tuple with x and y.","Convert into a 3d point with z-coordinate equals to zero.","Rounds each component to the nearest integer value.","Rounds each component to the smallest integer equal or …","Rounds each component to the biggest integer equal or …","Linearly interpolate between this point and another point.","","","Returns the point each component of which clamped by …","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> point.","Cast into an <code>f64</code> point.","Cast into an <code>usize</code> point, truncating decimals if any.","Cast into an <code>u32</code> point, truncating decimals if any.","Cast into an i32 point, truncating decimals if any.","Cast into an i64 point, truncating decimals if any.","","","Constructor, setting all components to zero.","The same as <code>origin()</code>.","Constructor taking scalar values directly.","Constructor taking properly Lengths instead of scalar …","Constructor setting all components to the same value.","Tag a unitless value with units.","Cast this point into a vector.","Returns a 2d point using this point’s x and y …","Returns a 2d point using this point’s x and z …","Returns a 2d point using this point’s x and z …","Cast into an array with x, y and z.","","Cast into a tuple with x, y and z.","","Drop the units, preserving only the numeric value.","Cast the unit, preserving the numeric value.","Convert into a 2d point.","Rounds each component to the nearest integer value.","Rounds each component to the smallest integer equal or …","Rounds each component to the biggest integer equal or …","Linearly interpolate between this point and another point.","","","Returns the point each component of which clamped by …","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> point.","Cast into an <code>f64</code> point.","Cast into an <code>usize</code> point, truncating decimals if any.","Cast into an <code>u32</code> point, truncating decimals if any.","Cast into an <code>i32</code> point, truncating decimals if any.","Cast into an <code>i64</code> point, truncating decimals if any.","","","","Creates an identity scale (1.0).","Returns the given point transformed by this scale.","Returns the given point transformed by this scale.","Returns the given vector transformed by this scale.","Returns the given vector transformed by this scale.","Returns the given rect transformed by this scale.","Returns the given box transformed by this scale.","Returns the given box transformed by this scale.","Returns <code>true</code> if this scale has no effect.","Returns the underlying scalar scale factor.","The inverse Scale (1.0 / self).","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Create a transform specifying its components in using the …","Returns true is this transform is approximately equal to …","Returns true is this transform is approximately equal to …","Returns an array containing this transform’s terms.","Returns an array containing this transform’s terms …","Equivalent to <code>to_array</code> with elements packed two at a time …","Create a transform providing its components via an array …","Equivalent to <code>from_array</code> with elements packed two at a …","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Returns the same transform with a different source unit.","Returns the same transform with a different destination …","Create a 3D transform from the current transform","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Create an identity matrix:","Returns the multiplication of the two matrices such that …","Create a 2d translation transform:","Applies a translation after self’s transformation and …","Applies a translation before self’s transformation and …","Returns a rotation transform.","Applies a rotation after self’s transformation and …","Applies a rotation before self’s transformation and …","Create a 2d scale transform:","Applies a scale after self’s transformation and returns …","Applies a scale before self’s transformation and …","Returns the given point transformed by this transform.","Returns the given vector transformed by this matrix.","Returns a rectangle that encompasses the result of …","Returns a box that encompasses the result of transforming …","Computes and returns the determinant of this transform.","Returns whether it is possible to compute the inverse …","Returns the inverse transform if possible.","Create a transform specifying all of it’s component as …","Create a transform representing a 2d transformation from …","Returns <code>true</code> if this transform can be represented with a …","Returns an array containing this transform’s terms.","Returns an array containing this transform’s terms …","Equivalent to <code>to_array</code> with elements packed four at a time…","Equivalent to <code>to_array_transposed</code> with elements packed …","Create a transform providing its components via an array …","Equivalent to <code>from_array</code> with elements packed four at a …","Tag a unitless value with units.","Drop the units, preserving only the numeric value.","Returns the same transform with a different source unit.","Returns the same transform with a different destination …","Create a 2D transform picking the relevant terms from …","Creates an identity matrix:","Create a 2d skew transform.","Create a simple perspective transform, projecting to the …","Returns the multiplication of the two matrices such that …","Create a 3d translation transform:","Returns a transform with a translation applied before self…","Returns a transform with a translation applied after self…","Create a 3d rotation transform from an angle / axis. The …","Returns a transform with a rotation applied after self’…","Returns a transform with a rotation applied before self’…","Create a 3d scale transform:","Returns a transform with a scale applied before self’s …","Returns a transform with a scale applied after self’s …","Returns the homogeneous vector corresponding to the …","Returns the given 2d point transformed by this transform, …","Returns the given 2d vector transformed by this matrix.","Returns the homogeneous vector corresponding to the …","Returns the given 3d point transformed by this transform, …","Returns the given 3d vector transformed by this matrix.","Returns a rectangle that encompasses the result of …","Returns a 2d box that encompasses the result of …","Returns a 3d box that encompasses the result of …","Create an orthogonal projection transform.","Check whether shapes on the XY plane with Z pointing …","Returns whether it is possible to compute the inverse …","Returns the inverse transform if possible.","Compute the determinant of the transform.","Multiplies all of the transform’s component by a scalar …","Convenience function to create a scale transform from a …","Returns a projection of this transform in 2d space.","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Returns true is this transform is approximately equal to …","Returns true is this transform is approximately equal to …","Returns <code>true</code> if all components are <code>true</code> and <code>false</code> …","Returns <code>true</code> if any component are <code>true</code> and <code>false</code> …","Returns <code>true</code> if all components are <code>false</code> and <code>false</code> …","Returns new vector with by-component AND operation …","Returns new vector with by-component OR operation applied.","Returns new vector with results of negation operation on …","Returns point, each component of which or from <code>a</code>, or from …","Returns vector, each component of which or from <code>a</code>, or …","Returns size, each component of which or from <code>a</code>, or from <code>b</code>…","Returns <code>true</code> if all components are <code>true</code> and <code>false</code> …","Returns <code>true</code> if any component are <code>true</code> and <code>false</code> …","Returns <code>true</code> if all components are <code>false</code> and <code>false</code> …","Returns new vector with by-component AND operation …","Returns new vector with by-component OR operation applied.","Returns new vector with results of negation operation on …","Returns point, each component of which or from <code>a</code>, or from …","Returns vector, each component of which or from <code>a</code>, or …","Returns size, each component of which or from <code>a</code>, or from <code>b</code>…","Returns a 2d vector using this vector’s x and y …","Returns a 2d vector using this vector’s x and z …","Returns a 2d vector using this vector’s y and z …","Constructor, setting all components to zero.","Constructor, setting all components to one.","Constructor taking scalar values directly.","Constructor setting all components to the same value.","Constructor taking angle and length","Constructor taking properly  Lengths instead of scalar …","Tag a unit-less value with units.","Computes the vector with absolute values of each …","Dot product.","Returns the norm of the cross product [self.x, self.y, 0] …","Returns the component-wise multiplication of the two …","Create a 3d vector from this one, using the specified z …","Cast this vector into a point.","Swap x and y.","Cast this vector into a size.","Drop the units, preserving only the numeric value.","Cast the unit.","Cast into an array with x and y.","Cast into a tuple with x and y.","Convert into a 3d vector with <code>z</code> coordinate equals to …","Rounds each component to the nearest integer value.","Rounds each component to the smallest integer equal or …","Rounds each component to the biggest integer equal or …","Returns the signed angle between this vector and the x …","Creates translation by this vector in vector units.","Returns the vector’s length squared.","Returns this vector projected onto another one.","Returns the signed angle between this vector and another …","Returns the vector length.","Returns the vector with length of one unit.","Returns the vector with length of one unit.","Return the normalized vector even if the length is larger …","Return this vector capped to a maximum length.","Return this vector with a minimum length applied.","Return this vector with minimum and maximum lengths …","Linearly interpolate each component between this vector …","Returns a reflection vector using an incident ray and a …","Returns the vector each component of which are minimum of …","Returns the vector each component of which are maximum of …","Returns the vector each component of which is clamped by …","Returns vector with results of “greater than” …","Returns vector with results of “lower than” operation …","Returns vector with results of “equal” operation on …","Returns vector with results of “not equal” operation …","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> vector.","Cast into an <code>f64</code> vector.","Cast into an <code>usize</code> vector, truncating decimals if any.","Cast into an <code>u32</code> vector, truncating decimals if any.","Cast into an i32 vector, truncating decimals if any.","Cast into an i64 vector, truncating decimals if any.","Constructor, setting all components to zero.","Constructor, setting all components to one.","Constructor taking scalar values directly.","Constructor setting all components to the same value.","Constructor taking properly  Lengths instead of scalar …","Tag a unitless value with units.","Computes the vector with absolute values of each …","Dot product.","Cross product.","Returns the component-wise multiplication of the two …","Cast this vector into a point.","Returns a 2d vector using this vector’s x and y …","Returns a 2d vector using this vector’s x and z …","Returns a 2d vector using this vector’s x and z …","Cast into an array with x, y and z.","Cast into an array with x, y, z and 0.","Cast into a tuple with x, y and z.","Cast into a tuple with x, y, z and 0.","Drop the units, preserving only the numeric value.","Cast the unit.","Convert into a 2d vector.","Rounds each component to the nearest integer value.","Rounds each component to the smallest integer equal or …","Rounds each component to the biggest integer equal or …","Creates translation by this vector in vector units","Returns the vector’s length squared.","Returns this vector projected onto another one.","Returns the positive angle between this vector and …","Returns the vector length.","Returns the vector with length of one unit","Returns the vector with length of one unit.","Return the normalized vector even if the length is larger …","Return this vector capped to a maximum length.","Return this vector with a minimum length applied.","Return this vector with minimum and maximum lengths …","Linearly interpolate each component between this vector …","Returns a reflection vector using an incident ray and a …","Returns the vector each component of which are minimum of …","Returns the vector each component of which are maximum of …","Returns the vector each component of which is clamped by …","Returns vector with results of “greater than” …","Returns vector with results of “lower than” operation …","Returns vector with results of “equal” operation on …","Returns vector with results of “not equal” operation …","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> vector.","Cast into an <code>f64</code> vector.","Cast into an <code>usize</code> vector, truncating decimals if any.","Cast into an <code>u32</code> vector, truncating decimals if any.","Cast into an <code>i32</code> vector, truncating decimals if any.","Cast into an <code>i64</code> vector, truncating decimals if any.","Constructor.","Returns true if the box has a negative volume.","Returns true if the size is zero, negative or NaN.","","Returns <code>true</code> if this box3d contains the point. Points are …","Returns <code>true</code> if this box3d contains the interior of the …","","","","Returns the smallest box containing both of the provided …","Returns the same box3d, translated by a vector.","","","","","Inflates the box by the specified sizes on each side …","Creates a Box3D of the given size, at offset zero.","Returns the smallest box containing all of the provided …","Linearly interpolate between this box3d and another box3d.","","","","","","Constructor, setting all sides to zero.","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Cast the unit","","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> box3d.","Cast into an <code>f64</code> box3d.","Cast into an <code>usize</code> box3d, truncating decimals if any.","Cast into an <code>u32</code> box3d, truncating decimals if any.","Cast into an <code>i32</code> box3d, truncating decimals if any.","Cast into an <code>i64</code> box3d, truncating decimals if any.","Return a box3d with edges rounded to integer coordinates, …","Return a box3d with faces/edges rounded to integer …","Return a box3d with faces/edges rounded to integer …","Constructor.","Constructor, setting all sides to zero.","Creates a rect of the given size, at offset zero.","","","","","","","","","","","Returns the same rectangle, translated by a vector.","","Returns true if this rectangle contains the point. Points …","","","","Returns true if this rectangle contains the interior of …","Calculate the size and position of an inner rectangle.","Calculate the size and position of an outer rectangle.","Returns the smallest rectangle defined by the …","Linearly interpolate between this rectangle and another …","","","","","","","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Cast the unit","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> rectangle.","Cast into an <code>f64</code> rectangle.","Cast into an <code>usize</code> rectangle, truncating decimals if any.","Cast into an <code>u32</code> rectangle, truncating decimals if any.","Cast into an <code>u64</code> rectangle, truncating decimals if any.","Cast into an <code>i32</code> rectangle, truncating decimals if any.","Cast into an <code>i64</code> rectangle, truncating decimals if any.","Return a rectangle with edges rounded to integer …","Return a rectangle with edges rounded to integer …","Return a rectangle with edges rounded to integer …","Construct a new rigid transformation, where the <code>rotation</code> …","","Construct an identity transform","Construct a new rigid transformation, where the …","","","Decompose this into a translation and an rotation to be …","Returns the multiplication of the two transforms such that…","Inverts the transformation","","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Creates a rotation from an angle in radians.","Creates a rotation from an angle in radians.","Creates the identity rotation.","Cast the unit, preserving the numeric value.","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Returns self.angle as a strongly typed <code>Angle<T></code>.","Creates a 3d rotation (around the z axis) from this 2d …","Returns the inverse of this rotation.","Returns a rotation representing the other rotation …","Returns the given 2d point transformed by this rotation.","Returns the given 2d vector transformed by this rotation.","Returns the matrix representation of this rotation.","Creates a rotation around from a quaternion …","Creates the identity rotation.","Returns the vector part (i, j, k) of this quaternion.","Cast the unit, preserving the numeric value.","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Creates a rotation around from a quaternion …","Creates a rotation around a given axis.","Creates a rotation around the x axis.","Creates a rotation around the y axis.","Creates a rotation around the z axis.","Creates a rotation from Euler angles.","Returns the inverse of this rotation.","Computes the norm of this quaternion.","Computes the squared norm of this quaternion.","Returns a unit quaternion from this one.","Returns <code>true</code> if norm of this quaternion is …","Spherical linear interpolation between this rotation and …","Basic Linear interpolation between this rotation and …","Returns the given 3d point transformed by this rotation.","Returns the given 2d point transformed by this rotation …","Returns the given 3d vector transformed by this rotation.","Returns the given 2d vector transformed by this rotation …","Returns the matrix representation of this rotation.","Returns a rotation representing this rotation followed by …","Constructor taking a scalar for each side.","Constructor taking a typed Length for each side.","Construct side offsets from min and a max vector offsets.","Construct side offsets from min and a max vector offsets.","Constructor, setting all sides to zero.","Returns <code>true</code> if all side offsets are zero.","Constructor setting the same value to all sides, taking a …","Constructor setting the same value to all sides, taking a …","","","The same as <code>Zero::zero()</code> but available without importing …","Constructor taking scalar values.","Constructor taking scalar strongly typed lengths.","Constructor setting all components to the same value.","Tag a unitless value with units.","Return this size as an array of two elements (width, then …","Return this size as a tuple of two elements (width, then …","Return this size as a vector with width and height.","Drop the units, preserving only the numeric value.","Cast the unit","Rounds each component to the nearest integer value.","Rounds each component to the smallest integer equal or …","Rounds each component to the biggest integer equal or …","Returns result of multiplication of both components","Linearly interpolate each component between this size and …","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> size.","Cast into an <code>f64</code> size.","Cast into an <code>uint</code> size, truncating decimals if any.","Cast into an <code>u32</code> size, truncating decimals if any.","Cast into an <code>u64</code> size, truncating decimals if any.","Cast into an <code>i32</code> size, truncating decimals if any.","Cast into an <code>i64</code> size, truncating decimals if any.","Computes the absolute value of each component.","Returns <code>true</code> if both components is positive and <code>false</code> any …","Returns the size each component of which are minimum of …","Returns the size each component of which are maximum of …","Returns the size each component of which clamped by …","","Returns vector with results of “greater then” …","Returns vector with results of “lower then” operation …","Returns <code>true</code> if any component of size is zero, negative, …","Returns vector with results of “equal” operation on …","Returns vector with results of “not equal” operation …","The same as <code>Zero::zero()</code> but available without importing …","Constructor taking scalar values.","Constructor taking scalar strongly typed lengths.","Constructor setting all components to the same value.","Tag a unitless value with units.","Return this size as an array of three elements (width, …","Return this size as an array of three elements (width, …","Return this size as a vector with width, height and depth.","Drop the units, preserving only the numeric value.","Cast the unit","Rounds each component to the nearest integer value.","Rounds each component to the smallest integer equal or …","Rounds each component to the biggest integer equal or …","Returns result of multiplication of all components","Linearly interpolate between this size and another size.","Cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Cast into an <code>f32</code> size.","Cast into an <code>f64</code> size.","Cast into an <code>uint</code> size, truncating decimals if any.","Cast into an <code>u32</code> size, truncating decimals if any.","Cast into an <code>i32</code> size, truncating decimals if any.","Cast into an <code>i64</code> size, truncating decimals if any.","Computes the absolute value of each component.","Returns <code>true</code> if all components is positive and <code>false</code> any …","Returns the size each component of which are minimum of …","Returns the size each component of which are maximum of …","Returns the size each component of which clamped by …","","Returns vector with results of “greater than” …","Returns vector with results of “lower than” operation …","Returns <code>true</code> if any component of size is zero, negative …","Returns vector with results of “equal” operation on …","Returns vector with results of “not equal” operation …","","","Creates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).","Check if translation does nothing (both x and y is <code>zero()</code>…","No-op, just cast the unit.","Cast into a 2D vector.","Cast into an array with x and y.","Cast into a tuple with x and y.","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Returns the matrix representation of this translation.","Translate a point and cast its unit.","Translate a rectangle and cast its unit.","Translate a 2D box and cast its unit.","Return the inverse transformation.","","","Creates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).","Check if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).","No-op, just cast the unit.","Cast into a 3D vector.","Cast into an array with x, y and z.","Cast into a tuple with x, y and z.","Drop the units, preserving only the numeric value.","Tag a unitless value with units.","Returns the matrix representation of this translation.","Translate a point and cast its unit.","Translate a point and cast its unit.","Translate a 2D box and cast its unit.","Translate a 3D box and cast its unit.","Translate a rectangle and cast its unit.","Return the inverse transformation.","","","","","","","","","","","","","","","","","","Create a pair of blending equations, where all the …","Create a pair of additive blending equations with the …","Create a gradient of evenly spaced colors with the domain …","Create a gradient of colors with custom spacing and …","Get a color from the gradient. The color of the closest …","Take <code>n</code> evenly spaced colors from the gradient, as an …","Slice this gradient to limit its domain.","Get the limits of this gradient’s domain.","Get a color from the gradient slice. The color of the …","Take <code>n</code> evenly spaced colors from the gradient slice, as …","Slice this gradient slice to further limit its domain. …","Get the limits of this gradient slice’s domain.","Create a luminance color.","Convert into another component type.","Convert from another component type.","Convert to a <code>(luma,)</code> tuple.","Convert from a <code>(luma,)</code> tuple.","Convert the color to linear luminance.","Convert linear luminance to nonlinear luminance.","Convert the color to a different encoding.","Convert luminance from a different encoding.","Create an RGB color.","Convert into another component type.","Convert from another component type.","Convert to a <code>(red, green, blue)</code> tuple.","Convert from a <code>(red, green, blue)</code> tuple.","Convert the color to linear RGB.","Convert linear RGB to nonlinear RGB.","Convert the color to a different encoding.","Convert RGB from a different encoding.","HSL and transparency for linear sRGB.","Linear HSL and transparency.","Convert to a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness, alpha)</code> tuple.","HSV and transparency for linear sRGB.","Linear HSV and transparency.","Convert to a <code>(hue, saturation, value, alpha)</code> tuple.","Convert from a <code>(hue, saturation, value, alpha)</code> tuple.","HWB and transparency for linear sRGB.","Linear HWB and transparency.","Convert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.","CIE L*a*b* and transparency and white point D65.","CIE L*a*b* and transparency.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","CIE L*C*h° and transparency with white point D65.","CIE L*C*h° and transparency.","Convert to a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Create a luminance color with transparency.","Convert into another component type.","Convert from another component type.","Convert to a <code>(luma, alpha)</code> tuple.","Convert from a <code>(luma, alpha)</code> tuple.","Convert the color to linear luminance with transparency.","Convert linear luminance to nonlinear luminance with …","Convert the color to a different encoding with …","Convert luminance from a different encoding with …","Nonlinear RGB.","Convert into another component type.","Convert from another component type.","Convert to a <code>(red, green, blue, alpha)</code> tuple.","Convert from a <code>(red, green, blue, alpha)</code> tuple.","Convert the color to linear RGB with transparency.","Convert linear RGB to nonlinear RGB with transparency.","Convert the color to a different encoding with …","Convert RGB from a different encoding with transparency.","CIE Yxy and transparency with white point D65.","CIE XYZ and transparency.","Convert to a <code>(X, Y, Z, alpha)</code> tuple.","Convert from a <code>(X, Y, Z, alpha)</code> tuple.","CIE Yxy and transparency with white point D65.","CIE Yxy and transparency.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","HSL for linear sRGB.","Linear HSL.","Convert to a <code>(hue, saturation, lightness)</code> tuple.","Convert from a <code>(hue, saturation, lightness)</code> tuple.","HSV for linear sRGB.","Linear HSV.","Convert to a <code>(hue, saturation, value)</code> tuple.","Convert from a <code>(hue, saturation, value)</code> tuple.","HWB for linear sRGB.","Linear HWB.","Convert to a <code>(hue, whiteness, blackness)</code> tuple.","Convert from a <code>(hue, whiteness, blackness)</code> tuple.","CIE L*a*b* with white point D65.","CIE L*a*b*.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","CIE L*C*h° with white point D65.","CIE L*C*h°.","Convert to a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","CIE XYZ with whtie point D65.","CIE XYZ.","Convert to a <code>(X, Y, Z)</code> tuple.","Convert from a <code>(X, Y, Z)</code> tuple.","CIE Yxy with white point D65.","CIE Yxy.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Consume this error and return the wrapped color","Create a new hue from degrees.","Create a new hue from radians, instead of degrees.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>…","Convert the hue to positive radians, in the range <code>[0, 2π)</code>…","Get the internal representation, without normalizing it.","Get the internal representation as radians, without …","Create a new hue from degrees.","Create a new hue from radians, instead of degrees.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>…","Convert the hue to positive radians, in the range <code>[0, 2π)</code>…","Get the internal representation, without normalizing it.","Get the internal representation as radians, without …","Creates a user interface using <code>root</code>.","Returns the root widget."],"i":[0,0,0,0,0,1,0,2,0,0,0,3,3,3,3,3,3,3,0,4,4,0,5,5,0,6,6,6,6,0,0,7,7,7,0,0,0,0,0,8,0,9,0,10,0,11,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,14,14,0,15,15,15,15,0,16,0,0,0,17,17,0,18,18,18,0,19,0,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,22,22,0,23,23,23,0,0,0,24,24,0,25,25,25,0,0,26,26,0,0,27,27,0,28,28,0,29,0,30,30,30,30,0,31,31,31,31,0,0,0,32,32,0,33,33,33,0,34,34,0,35,35,35,0,36,36,36,36,36,36,0,0,0,0,0,37,37,0,38,0,39,39,39,39,0,40,40,0,41,41,41,0,42,42,42,0,43,43,0,44,0,45,45,0,46,0,47,47,0,48,0,49,0,50,50,50,0,51,51,51,51,51,51,51,51,51,51,0,0,52,0,53,53,53,53,53,0,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,0,56,56,0,57,57,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,59,0,60,60,0,0,0,0,0,0,0,0,0,61,61,0,62,62,0,63,63,63,0,64,64,64,64,0,0,0,65,65,65,0,66,66,0,67,67,0,68,68,0,69,69,0,0,0,0,0,0,0,70,0,0,0,0,0,0,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,0,73,0,74,74,0,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,0,78,78,0,79,79,79,0,80,80,0,81,81,0,82,82,82,0,83,83,83,0,84,84,84,0,85,85,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,86,86,86,86,0,0,87,87,87,87,0,0,88,88,88,88,0,0,89,89,89,89,0,0,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,91,91,91,0,0,92,92,92,92,0,0,93,93,93,0,94,94,94,0,0,95,95,95,95,95,95,95,95,95,0,0,96,96,96,96,96,96,96,96,96,0,0,71,71,71,71,71,71,71,71,71,71,0,0,0,0,0,97,97,0,98,0,0,99,99,99,0,0,100,100,0,101,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,6,6,4,32,17,16,24,25,18,33,29,32,104,19,23,14,18,34,28,26,33,31,21,25,16,27,24,22,20,35,17,13,15,30,25,25,30,30,17,17,16,16,13,13,18,18,20,20,21,21,24,24,20,17,27,24,32,22,22,33,18,25,31,30,19,21,23,23,28,28,104,16,15,34,13,13,29,14,35,26,25,32,24,25,33,13,33,24,16,16,32,13,25,18,24,32,17,33,32,18,16,27,33,26,24,26,16,18,14,13,31,25,24,17,16,14,27,33,25,17,32,31,13,16,104,19,13,31,25,33,32,17,13,32,16,18,24,17,18,33,35,24,13,16,34,19,25,16,19,24,31,17,20,33,18,13,34,25,21,104,35,27,32,20,15,30,17,104,32,24,28,33,27,19,16,35,18,13,25,22,14,34,23,26,31,21,24,14,26,32,27,17,16,14,13,31,33,18,17,27,33,32,24,25,26,31,18,25,16,33,13,18,24,32,25,17,25,17,33,32,18,24,33,24,24,18,15,32,33,27,28,15,24,34,25,35,17,17,18,32,25,33,14,15,26,28,32,15,16,13,18,32,17,34,33,35,25,24,17,18,19,19,18,33,17,16,33,17,32,13,24,31,31,25,18,16,24,27,32,27,26,14,14,26,25,104,16,19,13,22,31,24,35,29,14,30,19,16,15,21,33,32,104,34,17,26,25,23,27,20,28,18,25,33,19,17,34,24,17,32,35,18,17,16,18,18,13,16,16,26,25,32,24,13,16,18,33,24,26,14,27,18,32,31,17,14,25,17,27,31,33,18,33,34,24,25,32,32,17,33,25,35,34,35,18,24,17,32,33,25,34,18,16,17,24,13,18,35,17,18,32,17,25,24,33,39,51,46,107,48,41,49,45,105,50,42,44,106,41,48,50,45,46,51,105,42,44,107,106,49,39,50,106,45,105,42,44,39,107,49,51,46,41,48,49,49,45,45,48,39,45,51,51,42,50,41,44,64,85,86,89,87,88,90,54,118,118,115,115,113,113,88,88,88,64,64,64,64,64,89,89,89,91,91,91,91,91,86,86,86,86,92,92,92,60,60,60,90,90,90,87,87,87,87,87,134,89,57,64,85,64,92,92,89,85,57,91,91,60,60,134,60,88,91,86,135,64,85,135,89,57,88,57,87,60,64,136,91,89,136,92,90,86,87,92,85,90,87,87,87,86,86,86,90,90,90,91,91,91,88,88,88,60,60,60,85,85,85,92,92,92,89,89,89,64,64,64,85,91,92,60,64,85,92,89,57,91,57,64,60,89,86,135,92,64,90,89,57,87,136,87,90,88,135,60,89,88,60,85,91,85,57,64,91,92,136,86,90,88,57,86,87,92,85,91,64,60,89,85,87,90,86,91,88,85,90,60,87,89,64,92,86,91,90,89,85,85,90,64,85,57,91,88,64,64,85,85,90,91,91,85,85,85,60,85,89,85,90,85,64,91,88,85,90,86,92,87,85,92,85,85,85,92,85,85,85,91,85,60,85,60,91,88,85,60,91,85,85,92,85,92,60,86,87,64,85,90,85,85,92,86,64,87,85,91,85,85,85,136,92,92,85,88,87,85,85,85,85,88,89,85,85,88,85,89,85,90,85,85,85,85,85,85,85,90,91,85,85,89,85,60,85,89,91,85,87,85,85,85,85,85,60,85,90,86,88,85,85,88,87,87,85,85,85,86,89,87,64,92,112,88,85,85,85,85,64,60,85,85,86,87,88,85,85,88,89,92,85,87,90,91,92,85,85,85,92,85,89,85,88,85,85,92,90,86,85,85,85,64,85,86,85,85,85,85,85,88,85,85,92,90,87,85,85,112,90,85,86,86,89,85,90,86,60,85,85,60,85,86,112,60,86,85,85,85,85,85,85,89,91,87,85,85,86,92,60,87,85,90,60,64,86,91,87,60,87,135,64,85,85,85,89,87,85,85,88,92,89,60,88,85,85,86,85,87,91,88,85,85,85,85,85,64,85,85,85,85,64,91,85,64,85,85,85,85,85,85,85,91,85,85,89,90,85,92,85,89,85,85,90,60,85,85,85,64,85,85,85,85,86,85,85,88,64,85,89,89,86,87,92,85,85,85,64,85,85,64,85,60,91,112,60,89,90,85,88,85,57,90,86,64,89,60,92,91,87,88,110,110,60,85,64,86,86,89,89,89,85,85,92,92,92,90,90,90,91,91,91,57,57,135,135,135,64,64,112,112,60,60,87,87,136,136,136,88,88,88,88,89,89,89,57,57,136,136,136,135,135,135,60,60,91,91,91,64,64,90,90,90,112,112,92,92,92,87,87,86,86,85,85,57,57,64,64,85,85,60,60,85,64,60,90,90,87,87,86,86,85,85,88,88,90,85,135,60,135,85,136,92,89,86,136,85,85,136,85,85,85,85,64,87,91,85,135,88,128,133,127,125,132,124,131,121,126,120,130,119,129,123,122,120,115,64,56,53,135,127,90,113,112,122,125,111,109,119,86,89,131,85,57,118,55,114,124,123,116,128,121,117,136,88,91,133,126,92,60,87,130,134,129,54,132,88,88,88,88,88,88,88,88,87,87,87,87,87,87,87,87,60,60,60,91,91,91,91,91,91,91,91,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,92,92,92,92,92,92,92,92,64,64,64,64,64,64,64,64,64,86,86,86,86,86,86,86,86,57,86,135,85,86,136,60,60,91,64,90,135,92,87,89,92,136,88,57,85,88,89,64,91,90,87,85,57,113,113,113,88,88,89,89,89,57,57,136,136,136,64,64,85,85,92,92,92,91,91,91,86,86,112,112,135,135,135,60,60,90,90,90,87,87,86,85,88,60,87,89,64,92,91,90,57,87,135,90,64,136,136,87,60,88,60,88,57,86,135,90,89,92,85,91,92,64,86,89,85,57,91,124,113,136,136,91,91,64,64,60,60,85,85,135,120,131,123,87,87,117,117,119,125,115,115,56,56,88,88,90,90,116,55,135,57,57,133,112,112,127,126,92,92,122,89,89,130,114,114,53,128,54,54,132,118,86,86,129,121,65,60,87,86,92,90,135,89,91,88,85,57,136,64,60,57,89,60,91,57,85,85,91,92,92,64,64,89,54,133,110,91,89,112,116,86,92,55,124,57,118,117,130,136,122,127,109,135,53,111,123,126,131,128,87,115,60,129,90,85,121,113,120,132,88,56,119,114,64,125,91,91,60,60,89,89,64,64,85,85,57,57,92,92,91,92,91,57,85,64,89,60,85,60,64,57,89,92,85,57,100,100,100,102,102,102,102,102,102,102,102,32,32,32,32,17,17,17,17,24,24,24,24,85,45,17,19,19,20,20,29,29,34,34,103,103,103,103,103,6,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,107,107,107,107,107,107,107,108,39,39,40,45,45,49,49,49,51,54,54,109,109,109,109,109,109,111,111,111,111,60,60,60,60,60,60,60,60,60,64,64,64,64,64,64,64,64,64,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,87,87,87,87,88,88,88,88,89,89,89,89,90,90,90,90,91,91,91,91,92,92,92,92,134,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,137,137],"f":[null,null,null,null,null,[[["rect",3],["f32",15],["points",3]]],null,[[["anywidget",8],["f32",15],["rect",3],["points",3]]],null,null,null,[[],[["points",3],["f32",15],["size2d",3]]],[[],[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["str",15],["point2d",3],["f32",15],["textoptions",3],["points",3]]],[[["textoptions",3],["str",15]],[["textmetrics",3],["points",3]]],[[["strokeoptions",3],["rect",3]]],[[["f32",15],["alpha",3],["rgb",3],["rect",3]]],[[["strokeoptions",3],["f32",15],["point2d",3],["points",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["point2d",3]],[[],["point3d",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["boolvector2d",3]],[[["bool",15]],["boolvector3d",3]],null,null,null,null,null,null,null,[[],["vector2d",3]],[[],["vector3d",3]],null,null,null,null,null,null,null,[[],["box3d",3]],null,null,null,[[],["rect",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["size2d",3]],[[],["size3d",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["f32",15],["style",3],["pixels",3],["scale",3]]],[[],["bool",15]],null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["prealpha",3]],["prealpha",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["prealpha",3]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["rgb",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["coneresponsematrices",3]],[[]],null,[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,[[]],[[]],null,null,null,null,null,null,[[],["xyz",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[]],[[]],null,null,[[]],null,null,[[]],[[]],null,null,[[],["option",4]],null,[[]],[[]],null,null,[[]],[[]],null,null,[[]],[[]],null,null,[[]],[[]],null,null,null,null,null,[[],["prealpha",3]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["result",4],["outofbounds",3]]],null,[[]],[[]],[[],[["result",4],["outofbounds",3]]],null,null,[[["xyz",3]]],[[["yxy",3]]],[[["lab",3]]],[[["lch",3]]],[[["rgb",3],["linear",3]]],[[["hsl",3]]],[[["hsv",3]]],[[["hwb",3]]],[[["luma",3],["linear",3]]],null,null,[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],["hwb",3]],[[],[["linear",3],["luma",3]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[],["any",8]],[[],["typeid",3]],null,null,null,null,null,null,[[["option",4],["size2d",3],["points",3]],[["points",3],["f32",15],["size2d",3]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["f32",15],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],[["box",3],["anystylecomponent",8],["global",3]]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["anywidget",8],["f32",15],["rect",3],["points",3]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["f32",15],["button",3],["rect",3],["points",3]]],[[["size2d",3],["option",4],["button",3],["points",3]],[["points",3],["f32",15],["size2d",3]]],[[["scale",3],["f32",15]]],[[["scale",3],["f32",15]]],[[],["textoptions",3]],[[],["size2d",3]],[[],["point2d",3]],[[],["length",3]],[[],["vector2d",3]],[[],["vector3d",3]],[[],["point3d",3]],[[],["size3d",3]],[[],["rotation2d",3]],[[],["size2d",3]],[[],["unknownunit",3]],[[],["scale",3]],[[],["boolvector3d",3]],[[],["box2d",3]],[[],["point3d",3]],[[],["translation2d",3]],[[],["rigidtransform3d",3]],[[],["box3d",3]],[[],["size3d",3]],[[],["sideoffsets2d",3]],[[],["transform3d",3]],[[],["vector3d",3]],[[],["length",3]],[[],["rect",3]],[[],["vector2d",3]],[[],["boolvector2d",3]],[[],["transform2d",3]],[[],["translation3d",3]],[[],["point2d",3]],[[],["angle",3]],[[],["homogeneousvector",3]],[[],["rotation3d",3]],[[],["vector3d",3]],[[["vector3d",3]],["bool",15]],[[]],[[["rotation3d",3]],["bool",15]],[[],["point2d",3]],[[["point2d",3]],["bool",15]],[[]],[[["length",3]],["bool",15]],[[]],[[["angle",3]],["bool",15]],[[],["point3d",3]],[[["point3d",3]],["bool",15]],[[]],[[["transform2d",3]],["bool",15]],[[]],[[["transform3d",3]],["bool",15]],[[],["vector2d",3]],[[["vector2d",3]],["bool",15]],[[["transform2d",3]],["bool",15]],[[["point2d",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["vector2d",3]],["bool",15]],[[["size2d",3]],["bool",15]],[[["boolvector2d",3]],["bool",15]],[[["boolvector2d",3]],["bool",15]],[[["size3d",3]],["bool",15]],[[["point3d",3]],["bool",15]],[[["vector3d",3]],["bool",15]],[[["sideoffsets2d",3]],["bool",15]],[[["rotation3d",3]],["bool",15]],[[["scale",3]],["bool",15]],[[["transform3d",3]],["bool",15]],[[["boolvector3d",3]],["bool",15]],[[["boolvector3d",3]],["bool",15]],[[["rigidtransform3d",3]],["bool",15]],[[["rigidtransform3d",3]],["bool",15]],[[["unknownunit",3]],["bool",15]],[[["length",3]],["bool",15]],[[["homogeneousvector",3]],["bool",15]],[[["translation2d",3]],["bool",15]],[[["angle",3]],["bool",15]],[[["angle",3]],["bool",15]],[[["rotation2d",3]],["bool",15]],[[["box2d",3]],["bool",15]],[[["translation3d",3]],["bool",15]],[[["box3d",3]],["bool",15]],[[],["vector3d",3]],[[],["size2d",3]],[[],["vector2d",3]],[[],["vector3d",3]],[[],["size3d",3]],[[],["angle",3]],[[],["size3d",3]],[[],["vector2d",3]],[[],["length",3]],[[],["length",3]],[[],["size2d",3]],[[],["angle",3]],[[],["vector3d",3]],[[],["point3d",3]],[[],["vector2d",3]],[[],["size2d",3]],[[],["point2d",3]],[[],["size3d",3]],[[["scale",3]]],[[["scale",3]]],[[["scale",3]]],[[]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[]],[[]],[[]],[[],["angle",3]],[[["scale",3]]],[[["scale",3]]],[[["scale",3]]],[[]],[[["length",3]]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[["scale",3]]],[[]],[[]],[[["angle",3]]],[[["length",3]],[["ordering",4],["option",4]]],[[["unknownunit",3]],[["ordering",4],["option",4]]],[[["scale",3]],[["ordering",4],["option",4]]],[[["angle",3]],[["ordering",4],["option",4]]],[[["sideoffsets2d",3]],["sideoffsets2d",3]],[[["vector3d",3]]],[[["size3d",3]]],[[["size2d",3]]],[[["vector2d",3]]],[[["angle",3]],["angle",3]],[[["size2d",3]],["size2d",3]],[[["length",3]]],[[["vector3d",3]]],[[["vector2d",3]]],[[["size2d",3]]],[[["size3d",3]]],[[["size3d",3]],["size3d",3]],[[["translation3d",3]]],[[["vector2d",3]]],[[["angle",3]],["angle",3]],[[["length",3]]],[[["translation2d",3]]],[[["scale",3]]],[[["vector3d",3]]],[[],["length",3]],[[],["scale",3]],[[],["vector2d",3]],[[],["sideoffsets2d",3]],[[],["point2d",3]],[[],["transform2d",3]],[[],["size3d",3]],[[],["point3d",3]],[[],["angle",3]],[[],["translation2d",3]],[[],["vector3d",3]],[[],["transform3d",3]],[[],["unknownunit",3]],[[],["translation3d",3]],[[],["rect",3]],[[],["size2d",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["scale",3]]],[[["scale",3]]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scale",3]]],[[]],[[["scale",3]]],[[]],[[["scale",3]]],[[["scale",3]]],[[]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[]],[[],["angle",3]],[[]],[[]],[[]],[[]],[[]],[[],["vector3d",3]],[[],["point2d",3]],[[],["size3d",3]],[[],["size2d",3]],[[],["point3d",3]],[[],["vector2d",3]],[[["vector3d",3]],["size3d",3]],[[["size2d",3]],["vector2d",3]],[[],["vector2d",3]],[[],["point3d",3]],[[["point2d",3]],["homogeneousvector",3]],[[],["size2d",3]],[[],["size3d",3]],[[["size2d",3]],["rect",3]],[[["rotation3d",3]],["rigidtransform3d",3]],[[["vector2d",3]],["homogeneousvector",3]],[[],["vector2d",3]],[[["vector2d",3]],["translation2d",3]],[[],["vector3d",3]],[[["vector3d",3]],["translation3d",3]],[[],["point2d",3]],[[],["point2d",3]],[[],["point3d",3]],[[],["size2d",3]],[[],["vector3d",3]],[[],["size3d",3]],[[["size2d",3]],["box2d",3]],[[["point3d",3]],["homogeneousvector",3]],[[["size3d",3]],["box3d",3]],[[["vector3d",3]],["rigidtransform3d",3]],[[["vector2d",3]],["size2d",3]],[[["vector3d",3]],["homogeneousvector",3]],[[["length",3]]],[[["angle",3]]],[[["vector3d",3]]],[[["size2d",3]]],[[["vector2d",3]]],[[["translation2d",3]]],[[["size3d",3]]],[[["translation3d",3]]],[[["vector3d",3]]],[[["vector2d",3]]],[[["size2d",3]]],[[["size3d",3]]],[[],["scale",3]],[[["scale",3]]],[[["scale",3]]],[[["scale",3]]],[[]],[[["scale",3]]],[[]],[[["scale",3]]],[[["scale",3]]],[[],["angle",3]],[[["scale",3]]],[[]],[[["scale",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scale",3]]],[[["scale",3]]],[[]],[[["scale",3]]],[[]],[[["scale",3]]],[[["unknownunit",3]],["ordering",4]],[[["length",3]],["ordering",4]],[[["scale",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector3d",3]]],[[["size3d",3]]],[[["scale",3]]],[[["point2d",3]]],[[["translation2d",3]]],[[["vector2d",3]]],[[["size2d",3]]],[[["size2d",3]]],[[["translation3d",3]]],[[["vector3d",3]]],[[["vector2d",3]]],[[["length",3]]],[[["point3d",3]]],[[["size3d",3]]],[[["angle",3]]],[[["length",3]],["length",3]],[[["length",3]],["length",3]],[[["scale",3]]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[]],[[["scale",3]]],[[]],[[["scale",3]]],[[]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[]],[[["scale",3]]],[[]],[[]],[[]],[[]],[[["scale",3]]],[[["scale",3]]],[[]],[[]],[[],["vector2d",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transform3d",3]],[[],["transform2d",3]],[[],["vector3d",3]],[[]],[[]],[[]],[[["size2d",3]]],[[["size3d",3]]],[[["vector3d",3]]],[[["translation2d",3]]],[[["size3d",3]]],[[["length",3]]],[[["size2d",3]]],[[["vector2d",3]]],[[["angle",3]]],[[["vector3d",3]]],[[["translation3d",3]]],[[["vector2d",3]]],[[],["point3d",3]],[[],["size2d",3]],[[],["point2d",3]],[[],["vector3d",3]],[[],["vector2d",3]],[[],["size3d",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["alignment",4]],[[],["fontfamily",3]],[[],["fontstyle",4]],[[],["colorpair",3]],[[],["foregroundcolor",3]],[[],["weight",4]],[[],["pixels",3]],[[],["verticalalignment",4]],[[],["backgroundcolor",3]],[[],["style",3]],[[],["points",3]],[[],[["points",3],["fontsize",3]]],[[],["stylesheet",3]],[[],["fontstyle",4]],[[],["points",3]],[[],["colorpair",3]],[[],["pixels",3]],[[],["verticalalignment",4]],[[],["backgroundcolor",3]],[[],["stylesheet",3]],[[],["style",3]],[[],["fontsize",3]],[[],["weight",4]],[[],["foregroundcolor",3]],[[],["alignment",4]],[[],["fontfamily",3]],[[["scale",3],["f32",15],["pixels",3],["style",3]]],[[["f32",15],["style",3],["pixels",3],["scale",3],["points",3]]],[[["foregroundcolor",3]],["colorpair",3]],[[["alpha",3],["f32",15],["rgb",3]],["colorpair",3]],[[],["fontfamily",3]],[[["style",3],["points",3]],["stylesheet",3]],[[["backgroundcolor",3]],["colorpair",3]],[[["weight",4]],["bool",15]],[[["weight",4]],["bool",15]],[[["verticalalignment",4]],["bool",15]],[[["fontstyle",4]],["bool",15]],[[["alignment",4]],["bool",15]],[[],["bool",15]],[[],[["rgbhue",3],["option",4]]],[[],["option",4]],[[],[["rgbhue",3],["option",4]]],[[],[["labhue",3],["option",4]]],[[],[["rgbhue",3],["option",4]]],[[],[["rgbhue",3],["option",4]]],[[],[["labhue",3],["option",4]]],[[["prealpha",3]],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["xyz",3]],["hwb",3]],[[["hsv",3]],["hwb",3]],[[["hwb",3]],["hwb",3]],[[["xyz",3]],["rgb",3]],[[["hsv",3]],["rgb",3]],[[["hsl",3]],["rgb",3]],[[["luma",3],["linear",3]],["rgb",3]],[[["rgb",3],["linear",3]],["rgb",3]],[[["xyz",3]],["lab",3]],[[["lab",3]],["lab",3]],[[["lch",3]],["lab",3]],[[["xyz",3]],["xyz",3]],[[["rgb",3],["linear",3]],["xyz",3]],[[["lab",3]],["xyz",3]],[[["yxy",3]],["xyz",3]],[[["luma",3],["linear",3]],["xyz",3]],[[["xyz",3]],["hsl",3]],[[["rgb",3],["linear",3]],["hsl",3]],[[["hsv",3]],["hsl",3]],[[["hsl",3]],["hsl",3]],[[["xyz",3]],["yxy",3]],[[["yxy",3]],["yxy",3]],[[["luma",3],["linear",3]],["yxy",3]],[[["xyz",3]],["luma",3]],[[["yxy",3]],["luma",3]],[[["linear",3],["luma",3]],["luma",3]],[[["xyz",3]],["lch",3]],[[["lab",3]],["lch",3]],[[["lch",3]],["lch",3]],[[["xyz",3]],["hsv",3]],[[["rgb",3],["linear",3]],["hsv",3]],[[["hsl",3]],["hsv",3]],[[["hwb",3]],["hsv",3]],[[["hsv",3]],["hsv",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[["rgb",3]]],[[]],[[["yxy",3]]],[[["lab",3]]],[[]],[[]],[[]],[[["xyz",3]]],[[]],[[["luma",3]]],[[],["str",15]],[[["luma",3]]],[[]],[[]],[[["hsl",3]]],[[["labhue",3]]],[[["rgb",3]]],[[]],[[]],[[["lab",3]]],[[]],[[["hwb",3]]],[[["prealpha",3]]],[[["hsv",3]]],[[]],[[]],[[]],[[["xyz",3]]],[[]],[[["rgbhue",3]]],[[]],[[]],[[]],[[]],[[["yxy",3]]],[[["alpha",3]]],[[["lch",3]]],[[],["bool",15]],[[],["hsv",3]],[[]],[[],["bool",15]],[[],["hsl",3]],[[]],[[],["bool",15]],[[],["lch",3]],[[]],[[],["bool",15]],[[],["xyz",3]],[[]],[[],["bool",15]],[[],["hwb",3]],[[]],[[],["bool",15]],[[],["luma",3]],[[]],[[],["bool",15]],[[],["alpha",3]],[[]],[[],["bool",15]],[[],["yxy",3]],[[]],[[],["bool",15]],[[],["lab",3]],[[]],[[],["bool",15]],[[],["rgb",3]],[[]],[[]],[[["xyz",3]]],[[]],[[]],[[]],[[["alpha",3]]],[[["yxy",3]]],[[]],[[]],[[]],[[["prealpha",3]]],[[["rgb",3]]],[[["luma",3]]],[[["lab",3]]],[[["hsl",3]]],[[["labhue",3]],["labhue",3]],[[["yxy",3]]],[[["rgb",3]]],[[]],[[]],[[]],[[["hsv",3]]],[[["rgbhue",3]],["rgbhue",3]],[[]],[[["lch",3]]],[[]],[[],["labhue",3]],[[]],[[["lab",3]]],[[["hwb",3]]],[[["luma",3]]],[[]],[[["xyz",3]]],[[["alpha",3]]],[[["prealpha",3]]],[[]],[[]],[[]],[[],["rgbhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["alpha",3]],[[],["hsv",3]],[[],["lch",3]],[[],["hsl",3]],[[],["xyz",3]],[[],["hwb",3]],[[],["alpha",3]],[[],["lch",3]],[[],["luma",3]],[[],["hsv",3]],[[],["lab",3]],[[],["rgb",3]],[[],["yxy",3]],[[],["hsl",3]],[[["xyz",3],["alpha",3]],["xyz",3]],[[["alpha",3],["hsl",3]],["lch",3]],[[["luma",3]],["lab",3]],[[["hsl",3]],[["hwb",3],["alpha",3]]],[[["rgb",3]],[["luma",3],["alpha",3]]],[[["hsv",3]],["lch",3]],[[["hwb",3]],["rgb",3]],[[["xyz",3],["alpha",3]],[["rgb",3],["alpha",3]]],[[["alpha",3]],["prealpha",3]],[[["hwb",3]],["xyz",3]],[[["alpha",3],["rgb",3]],["hwb",3]],[[["xyz",3]],["rgb",3]],[[["alpha",3],["hwb",3]],["rgb",3]],[[["hwb",3],["alpha",3]],[["lab",3],["alpha",3]]],[[["alpha",3],["hsv",3]],[["lab",3],["alpha",3]]],[[["lab",3]],["lch",3]],[[["lch",3]],["xyz",3]],[[["luma",3]],["xyz",3]],[[["yxy",3],["alpha",3]],[["lab",3],["alpha",3]]],[[],[["rgb",3],["alpha",3]]],[[["hsl",3]],[["xyz",3],["alpha",3]]],[[],["luma",3]],[[["alpha",3],["lab",3]],[["luma",3],["alpha",3]]],[[["xyz",3]],["lab",3]],[[["hsv",3]],[["lab",3],["alpha",3]]],[[["alpha",3],["lch",3]],["lch",3]],[[["yxy",3],["alpha",3]],[["xyz",3],["alpha",3]]],[[["hsv",3]],["rgb",3]],[[["alpha",3],["luma",3]],["xyz",3]],[[["hsv",3]],["hwb",3]],[[["alpha",3],["hsl",3]],[["alpha",3],["lch",3]]],[[],["lch",3]],[[["alpha",3],["luma",3]],["hsl",3]],[[],["yxy",3]],[[["luma",3]],["hsv",3]],[[["alpha",3],["rgb",3]],[["alpha",3],["hsl",3]]],[[["alpha",3],["rgb",3]],["yxy",3]],[[["lab",3],["alpha",3]],[["xyz",3],["alpha",3]]],[[["alpha",3],["rgb",3]],[["hwb",3],["alpha",3]]],[[["yxy",3]],[["lab",3],["alpha",3]]],[[["luma",3]],["yxy",3]],[[],["alpha",3]],[[["hsl",3]],[["yxy",3],["alpha",3]]],[[["alpha",3],["rgb",3]],[["xyz",3],["alpha",3]]],[[["hsv",3]],["xyz",3]],[[],[["alpha",3],["lch",3]]],[[["alpha",3],["hsv",3]],["luma",3]],[[["alpha",3],["lch",3]],[["rgb",3],["alpha",3]]],[[["rgb",3]],["luma",3]],[[["hwb",3],["alpha",3]],["xyz",3]],[[["alpha",3],["lab",3]],["hwb",3]],[[["lch",3]],[["lab",3],["alpha",3]]],[[["hsv",3]],["luma",3]],[[["lab",3]],["xyz",3]],[[["hwb",3]],[["alpha",3],["hsl",3]]],[[["alpha",3],["hsv",3]],[["luma",3],["alpha",3]]],[[["hwb",3]],["yxy",3]],[[["alpha",3],["rgb",3]],[["luma",3],["alpha",3]]],[[["alpha",3],["lch",3]],["yxy",3]],[[["alpha",3],["luma",3]],["luma",3]],[[["alpha",3],["rgb",3]],["hsl",3]],[[["alpha",3],["lab",3]],["hsv",3]],[[["hsl",3],["alpha",3]],["rgb",3]],[[["hwb",3]],[["lab",3],["alpha",3]]],[[["hwb",3],["alpha",3]],["lch",3]],[[["luma",3]],[["xyz",3],["alpha",3]]],[[["hsl",3]],[["alpha",3],["lch",3]]],[[["rgb",3]],["yxy",3]],[[["alpha",3],["yxy",3]],["hsl",3]],[[["alpha",3],["luma",3]],["rgb",3]],[[["alpha",3],["luma",3]],["hsv",3]],[[["alpha",3],["luma",3]],[["hwb",3],["alpha",3]]],[[["alpha",3],["hsl",3]],["xyz",3]],[[["lab",3]],[["yxy",3],["alpha",3]]],[[["yxy",3]],[["hsv",3],["alpha",3]]],[[["hsl",3]],[["lab",3],["alpha",3]]],[[],["rgbhue",3]],[[["alpha",3],["hsv",3]],["yxy",3]],[[["lch",3]],["yxy",3]],[[["hwb",3]],[["rgb",3],["alpha",3]]],[[["yxy",3]],["hwb",3]],[[["lch",3],["alpha",3]],["hsv",3]],[[["hsv",3]],[["hwb",3],["alpha",3]]],[[["xyz",3]],[["alpha",3],["lch",3]]],[[["yxy",3]],[["alpha",3],["hsl",3]]],[[["alpha",3],["luma",3]],[["alpha",3],["lch",3]]],[[["lab",3]],["hwb",3]],[[["hwb",3]],["lab",3]],[[["hsv",3]],[["xyz",3],["alpha",3]]],[[["xyz",3],["alpha",3]],[["lab",3],["alpha",3]]],[[["alpha",3],["luma",3]],["hwb",3]],[[["hwb",3],["alpha",3]],[["hsv",3],["alpha",3]]],[[["hwb",3],["alpha",3]],["lab",3]],[[["lab",3]],[["hwb",3],["alpha",3]]],[[["alpha",3],["luma",3]],["lch",3]],[[["alpha",3],["lab",3]],[["hsv",3],["alpha",3]]],[[["alpha",3],["hsl",3]],[["lab",3],["alpha",3]]],[[],[["hwb",3],["alpha",3]]],[[["yxy",3]],[["hwb",3],["alpha",3]]],[[["lch",3],["alpha",3]],[["hwb",3],["alpha",3]]],[[["alpha",3],["lab",3]],[["hwb",3],["alpha",3]]],[[["xyz",3]],[["yxy",3],["alpha",3]]],[[["xyz",3],["alpha",3]],["lch",3]],[[["rgb",3]],["xyz",3]],[[["hwb",3]],[["yxy",3],["alpha",3]]],[[["hwb",3]],[["xyz",3],["alpha",3]]],[[["alpha",3],["hsl",3]],["lab",3]],[[["alpha",3],["yxy",3]],[["alpha",3],["hsl",3]]],[[["yxy",3]],["luma",3]],[[["hwb",3],["alpha",3]],[["luma",3],["alpha",3]]],[[["alpha",3],["hsv",3]],["lab",3]],[[],["xyz",3]],[[["lch",3]],[["alpha",3],["hsl",3]]],[[["hwb",3]],["hsv",3]],[[["xyz",3],["alpha",3]],[["alpha",3],["hsl",3]]],[[],[["alpha",3],["luma",3]]],[[["alpha",3],["lch",3]],[["xyz",3],["alpha",3]]],[[["hwb",3]],[["luma",3],["alpha",3]]],[[["luma",3]],[["hwb",3],["alpha",3]]],[[["hwb",3]],["luma",3]],[[["hwb",3],["alpha",3]],[["yxy",3],["alpha",3]]],[[["alpha",3],["hsv",3]],["lch",3]],[[["rgb",3]],["hsl",3]],[[["luma",3]],["hwb",3]],[[["alpha",3],["luma",3]],[["hsv",3],["alpha",3]]],[[["rgb",3]],[["alpha",3],["lch",3]]],[[["hsv",3],["alpha",3]],["hwb",3]],[[["alpha",3],["yxy",3]],["hsv",3]],[[["hsl",3]],["hsv",3]],[[["alpha",3],["hsl",3]],[["yxy",3],["alpha",3]]],[[["alpha",3],["hsl",3]],[["hwb",3],["alpha",3]]],[[["hsv",3],["alpha",3]],[["alpha",3],["hsl",3]]],[[["xyz",3],["alpha",3]],["hsl",3]],[[["yxy",3]],["lab",3]],[[["lab",3]],["hsv",3]],[[["hsl",3]],["rgb",3]],[[["lab",3]],["yxy",3]],[[["rangefrom",3]],["range",3]],[[["alpha",3],["hsl",3]],["hwb",3]],[[["lab",3]],[["alpha",3],["lch",3]]],[[["alpha",3],["yxy",3]],[["hsv",3],["alpha",3]]],[[["lab",3]],[["hsv",3],["alpha",3]]],[[["alpha",3],["luma",3]],[["rgb",3],["alpha",3]]],[[["yxy",3]],["rgb",3]],[[["xyz",3],["alpha",3]],["luma",3]],[[["alpha",3],["rgb",3]],[["yxy",3],["alpha",3]]],[[["xyz",3],["alpha",3]],[["luma",3],["alpha",3]]],[[["alpha",3],["lab",3]],["hsl",3]],[[["alpha",3],["hsl",3]],["hsv",3]],[[["alpha",3],["yxy",3]],["hwb",3]],[[],[["alpha",3],["yxy",3]]],[[["alpha",3],["luma",3]],[["lab",3],["alpha",3]]],[[["hsl",3]],["hwb",3]],[[["yxy",3],["alpha",3]],["lab",3]],[[["yxy",3],["alpha",3]],["yxy",3]],[[["lab",3]],[["alpha",3],["hsl",3]]],[[["hsv",3],["alpha",3]],["hsv",3]],[[["luma",3]],["lch",3]],[[["yxy",3],["alpha",3]],["xyz",3]],[[["hwb",3],["alpha",3]],["yxy",3]],[[["alpha",3],["hwb",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["hsv",3]],[["alpha",3],["lch",3]]],[[["xyz",3]],[["lab",3],["alpha",3]]],[[["alpha",3],["hsl",3]],["yxy",3]],[[["rgb",3]],[["alpha",3],["hsl",3]]],[[["xyz",3],["alpha",3]],["lab",3]],[[["xyz",3],["alpha",3]],[["alpha",3],["lch",3]]],[[["xyz",3]],["hwb",3]],[[["xyz",3]],[["luma",3],["alpha",3]]],[[["luma",3]],[["rgb",3],["alpha",3]]],[[["hsl",3]],["yxy",3]],[[["rgb",3]],["lch",3]],[[["hwb",3],["alpha",3]],["hsl",3]],[[["alpha",3],["rgb",3]],[["lab",3],["alpha",3]]],[[["alpha",3],["rgb",3]],[["alpha",3],["lch",3]]],[[["lab",3],["alpha",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["lch",3]],["rgb",3]],[[["alpha",3],["rgb",3]],[["hsv",3],["alpha",3]]],[[["hsv",3]],["hsl",3]],[[["lch",3]],[["hsv",3],["alpha",3]]],[[["hwb",3],["alpha",3]],[["xyz",3],["alpha",3]]],[[["lab",3]],[["luma",3],["alpha",3]]],[[["lab",3],["alpha",3]],[["yxy",3],["alpha",3]]],[[["lch",3],["alpha",3]],[["alpha",3],["hsl",3]]],[[["lch",3],["alpha",3]],["hwb",3]],[[["hwb",3],["alpha",3]],[["alpha",3],["hsl",3]]],[[],[["alpha",3],["hsl",3]]],[[["lab",3],["alpha",3]],["yxy",3]],[[["xyz",3]],["lch",3]],[[["rgb",3]],["hsv",3]],[[["yxy",3]],[["xyz",3],["alpha",3]]],[[["lch",3]],[["yxy",3],["alpha",3]]],[[["range",3]],["range",3]],[[["lab",3],["alpha",3]],["lch",3]],[[["lab",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["hsl",3]],["hsl",3]],[[["lch",3]],["hsl",3]],[[["hsv",3]],["lab",3]],[[["xyz",3]],[["alpha",3],["hsl",3]]],[[["hwb",3]],["lch",3]],[[["yxy",3]],["hsl",3]],[[["alpha",3],["lab",3]],["luma",3]],[[["alpha",3],["yxy",3]],[["hwb",3],["alpha",3]]],[[["luma",3]],[["alpha",3],["hsl",3]]],[[["hsl",3]],["luma",3]],[[["xyz",3],["alpha",3]],[["hwb",3],["alpha",3]]],[[["hwb",3]],["hsl",3]],[[["rangeto",3]],["range",3]],[[["alpha",3],["yxy",3]],["luma",3]],[[["lab",3]],["hsl",3]],[[["yxy",3],["alpha",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["hsv",3]],[["yxy",3],["alpha",3]]],[[["hsv",3]],[["luma",3],["alpha",3]]],[[["lch",3],["alpha",3]],[["hsv",3],["alpha",3]]],[[["rgb",3]],[["hsv",3],["alpha",3]]],[[["hwb",3]],[["hsv",3],["alpha",3]]],[[["alpha",3],["lch",3]],["lab",3]],[[["alpha",3],["rgb",3]],["xyz",3]],[[["yxy",3]],["hsv",3]],[[["xyz",3],["alpha",3]],[["hsv",3],["alpha",3]]],[[["rgb",3]],[["hwb",3],["alpha",3]]],[[["xyz",3]],["hsl",3]],[[["xyz",3]],["yxy",3]],[[["lch",3]],["luma",3]],[[["xyz",3]],["hsv",3]],[[["hsv",3]],[["alpha",3],["hsl",3]]],[[["yxy",3]],["lch",3]],[[["hwb",3],["alpha",3]],["luma",3]],[[["xyz",3],["alpha",3]],["rgb",3]],[[],["hsl",3]],[[["hsl",3]],["xyz",3]],[[],["hsv",3]],[[["lch",3],["alpha",3]],["luma",3]],[[["alpha",3],["rgb",3]],["hsv",3]],[[],["labhue",3]],[[["yxy",3],["alpha",3]],["rgb",3]],[[["lch",3]],[["xyz",3],["alpha",3]]],[[["hsl",3]],[["hsv",3],["alpha",3]]],[[["xyz",3]],[["rgb",3],["alpha",3]]],[[["rgb",3]],["lab",3]],[[["hwb",3],["alpha",3]],["hsv",3]],[[["hsl",3]],[["luma",3],["alpha",3]]],[[],[["alpha",3],["xyz",3]]],[[["xyz",3],["alpha",3]],["hwb",3]],[[["hsv",3]],["yxy",3]],[[["alpha",3],["rgb",3]],["lab",3]],[[["lab",3]],["luma",3]],[[["hwb",3],["alpha",3]],["hwb",3]],[[["yxy",3]],[["luma",3],["alpha",3]]],[[["yxy",3]],[["alpha",3],["lch",3]]],[[["luma",3]],["hsl",3]],[[["xyz",3],["alpha",3]],[["yxy",3],["alpha",3]]],[[["lch",3]],["hsv",3]],[[["lab",3],["alpha",3]],["xyz",3]],[[],["hwb",3]],[[["hsv",3]],[["rgb",3],["alpha",3]]],[[["rgb",3]],[["xyz",3],["alpha",3]]],[[["hwb",3],["alpha",3]],[["alpha",3],["lch",3]]],[[["alpha",3],["hsl",3]],[["xyz",3],["alpha",3]]],[[["alpha",3],["luma",3]],[["xyz",3],["alpha",3]]],[[["alpha",3],["hsv",3]],["rgb",3]],[[["alpha",3],["hsv",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["luma",3]],[["alpha",3],["hsl",3]]],[[["alpha",3],["lab",3]],[["alpha",3],["hsl",3]]],[[["hsl",3]],[["rgb",3],["alpha",3]]],[[["lch",3]],["rgb",3]],[[["yxy",3]],["xyz",3]],[[["alpha",3],["luma",3]],[["yxy",3],["alpha",3]]],[[["alpha",3],["rgb",3]],["rgb",3]],[[["yxy",3],["alpha",3]],[["alpha",3],["lch",3]]],[[["hsl",3],["alpha",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["lch",3]],[["lab",3],["alpha",3]]],[[],[["lab",3],["alpha",3]]],[[["alpha",3],["yxy",3]],[["luma",3],["alpha",3]]],[[["hsv",3]],[["yxy",3],["alpha",3]]],[[["alpha",3],["lch",3]],[["yxy",3],["alpha",3]]],[[["alpha",3],["lch",3]],["xyz",3]],[[["lch",3],["alpha",3]],[["luma",3],["alpha",3]]],[[["xyz",3]],[["hsv",3],["alpha",3]]],[[["hsl",3]],["lab",3]],[[["alpha",3],["rgb",3]],["lch",3]],[[["lab",3],["alpha",3]],[["alpha",3],["lch",3]]],[[["xyz",3],["alpha",3]],["yxy",3]],[[["prealpha",3]],["alpha",3]],[[["lch",3]],["lab",3]],[[["xyz",3]],[["hwb",3],["alpha",3]]],[[["luma",3]],[["yxy",3],["alpha",3]]],[[["yxy",3],["alpha",3]],["lch",3]],[[["alpha",3],["hsl",3]],["luma",3]],[[["hwb",3]],[["alpha",3],["lch",3]]],[[["alpha",3],["hsl",3]],[["hsv",3],["alpha",3]]],[[["hsv",3]],[["alpha",3],["lch",3]]],[[],["rgb",3]],[[["alpha",3],["hsv",3]],[["xyz",3],["alpha",3]]],[[["rgb",3]],[["yxy",3],["alpha",3]]],[[["luma",3]],[["alpha",3],["lch",3]]],[[["luma",3]],[["hsv",3],["alpha",3]]],[[["hsv",3],["alpha",3]],["hsl",3]],[[["lch",3]],[["rgb",3],["alpha",3]]],[[["alpha",3],["hsl",3]],[["luma",3],["alpha",3]]],[[["lch",3]],["hwb",3]],[[["lab",3]],["rgb",3]],[[["luma",3]],[["lab",3],["alpha",3]]],[[],["lab",3]],[[["lab",3],["alpha",3]],["lab",3]],[[["lch",3],["alpha",3]],["hsl",3]],[[["xyz",3],["alpha",3]],["hsv",3]],[[["alpha",3],["luma",3]],["yxy",3]],[[["lch",3]],[["hwb",3],["alpha",3]]],[[["lab",3]],[["xyz",3],["alpha",3]]],[[["hsv",3],["alpha",3]],[["hwb",3],["alpha",3]]],[[["luma",3]],["rgb",3]],[[["lch",3]],[["luma",3],["alpha",3]]],[[["yxy",3]],[["rgb",3],["alpha",3]]],[[["lab",3],["alpha",3]],["rgb",3]],[[],[["alpha",3],["hsv",3]]],[[["alpha",3],["rgb",3]],["luma",3]],[[["alpha",3],["hsv",3]],["xyz",3]],[[["rangefull",3]],["range",3]],[[["xyz",3]],["luma",3]],[[["alpha",3],["luma",3]],["lab",3]],[[["hsl",3]],["lch",3]],[[["rgb",3]],[["lab",3],["alpha",3]]],[[["rgb",3]],["hwb",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["hsl",3]],["bool",15]],[[]],[[["lab",3]],["bool",15]],[[["lab",3]],["bool",15]],[[]],[[["alpha",3]],["bool",15]],[[]],[[["yxy",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[]],[[["lch",3]],["bool",15]],[[["lch",3]],["bool",15]],[[]],[[["xyz",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[]],[[["prealpha",3]],["bool",15]],[[]],[[["labhue",3]],["bool",15]],[[["labhue",3]],["bool",15]],[[]],[[["rgb",3]],["bool",15]],[[]],[[["range",3]],["bool",15]],[[]],[[["luma",3]],["bool",15]],[[]],[[["hsv",3]],["bool",15]],[[]],[[["rgbhue",3]],["bool",15]],[[["rgbhue",3]],["bool",15]],[[]],[[["hwb",3]],["bool",15]],[[]],[[["hwb",3]],["bool",15]],[[]],[[["lab",3]],["bool",15]],[[["lab",3]],["bool",15]],[[]],[[["prealpha",3]],["bool",15]],[[]],[[["rgbhue",3]],["bool",15]],[[["rgbhue",3]],["bool",15]],[[]],[[["labhue",3]],["bool",15]],[[["labhue",3]],["bool",15]],[[]],[[["luma",3]],["bool",15]],[[]],[[["xyz",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[]],[[["rgb",3]],["bool",15]],[[]],[[["lch",3]],["bool",15]],[[["lch",3]],["bool",15]],[[]],[[["range",3]],["bool",15]],[[]],[[["yxy",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[]],[[["hsv",3]],["bool",15]],[[]],[[["hsl",3]],["bool",15]],[[]],[[["alpha",3]],["bool",15]],[[],["prealpha",3]],[[["prealpha",3]],["prealpha",3]],[[],[["prealpha",3],["rgb",3]]],[[["prealpha",3],["rgb",3]],["rgb",3]],[[],["prealpha",3]],[[["prealpha",3]],["alpha",3]],[[],[["luma",3],["prealpha",3]]],[[["luma",3],["prealpha",3]],["luma",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["lch",3]],[[],["lch",3]],[[],["hsv",3]],[[],["hsv",3]],[[],["hsl",3]],[[],["hsl",3]],[[],["alpha",3]],[[],["alpha",3]],[[],["hwb",3]],[[],["hwb",3]],[[]],[[]],[[],["f32",15]],[[]],[[],["f64",15]],[[]],[[],["f32",15]],[[]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],["hwb",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],["hsl",3]],[[],["hsv",3]],[[],[["linear",3],["luma",3]]],[[]],[[]],[[],["labhue",3]],[[]],[[["hsl",3]]],[[["rgbhue",3]],["rgbhue",3]],[[["luma",3]]],[[]],[[["xyz",3]]],[[]],[[["lch",3]]],[[["labhue",3]],["labhue",3]],[[["yxy",3]]],[[]],[[]],[[]],[[],["rgbhue",3]],[[["hwb",3]]],[[["prealpha",3]]],[[["alpha",3]]],[[]],[[["lab",3]]],[[["rgb",3]]],[[]],[[]],[[["hsv",3]]],[[]],[[]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["u32",15]],[[["u32",15],["hwb",3]],["bool",15]],[[],["u32",15]],[[["lab",3],["u32",15]],["bool",15]],[[["lab",3],["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15],["prealpha",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["rgbhue",3]],["bool",15]],[[["u32",15],["rgbhue",3]],["bool",15]],[[],["u32",15]],[[["rgb",3],["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15],["alpha",3]],["bool",15]],[[],["u32",15]],[[["yxy",3],["u32",15]],["bool",15]],[[["yxy",3],["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15],["xyz",3]],["bool",15]],[[["u32",15],["xyz",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["hsl",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["range",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["labhue",3]],["bool",15]],[[["u32",15],["labhue",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["luma",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["lch",3]],["bool",15]],[[["u32",15],["lch",3]],["bool",15]],[[],["u32",15]],[[["hsv",3],["u32",15]],["bool",15]],[[["hsl",3]],["hsl",3]],[[["alpha",3]],["alpha",3]],[[["hwb",3]],["hwb",3]],[[["luma",3]],["luma",3]],[[["hsv",3]],["hsv",3]],[[["lab",3]],["lab",3]],[[["rgb",3]],["rgb",3]],[[["yxy",3]],["yxy",3]],[[["xyz",3]],["xyz",3]],[[["lch",3]],["lch",3]],[[["prealpha",3]],["prealpha",3]],[[]],[[]],[[]],[[["rgb",3]]],[[["rgbhue",3]]],[[]],[[["hsv",3]]],[[["luma",3]]],[[]],[[]],[[["hwb",3]]],[[["prealpha",3]]],[[]],[[["labhue",3]]],[[["lch",3]]],[[]],[[["yxy",3]]],[[["alpha",3]]],[[["xyz",3]]],[[]],[[]],[[["hsl",3]]],[[["lab",3]]],[[]],[[]],[[]],[[["d65",3]],["bool",15]],[[["srgb",3]],["bool",15]],[[["rgbhue",3]],["bool",15]],[[],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["luma",3]],["bool",15]],[[["luma",3]],["bool",15]],[[["alpha",3]],["bool",15]],[[["alpha",3]],["bool",15]],[[["labhue",3]],["bool",15]],[[["b",3]],["bool",15]],[[["d55degree10",3]],["bool",15]],[[["d55",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["linear",3]],["bool",15]],[[["linear",3]],["bool",15]],[[["a",3]],["bool",15]],[[["d75",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[["parameters",3]],["bool",15]],[[["parameters",3]],["bool",15]],[[["hwb",3]],["bool",15]],[[["hwb",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["f2p2",3]],["bool",15]],[[["parameter",4]],["bool",15]],[[],["bool",15]],[[["prealpha",3]],["bool",15]],[[["prealpha",3]],["bool",15]],[[["d75degree10",3]],["bool",15]],[[["range",3]],["bool",15]],[[["range",3]],["bool",15]],[[["f2",3]],["bool",15]],[[["e",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[["d50",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["d50degree10",3]],["bool",15]],[[["gamma",3]],["bool",15]],[[["gamma",3]],["bool",15]],[[["equation",4]],["bool",15]],[[["f7",3]],["bool",15]],[[["equations",3]],["bool",15]],[[["equations",3]],["bool",15]],[[["d65degree10",3]],["bool",15]],[[["linearfn",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[["f11",3]],["bool",15]],[[["c",3]],["bool",15]],[[],["coneresponsematrices",3]],[[],["luma",3]],[[],["hsv",3]],[[],["hsl",3]],[[],["yxy",3]],[[],["lch",3]],[[],["labhue",3]],[[],["lab",3]],[[],["xyz",3]],[[],["hwb",3]],[[],["alpha",3]],[[],["prealpha",3]],[[],["rgbhue",3]],[[],["rgb",3]],[[]],[[["prealpha",3]]],[[]],[[["luma",3]]],[[]],[[]],[[["alpha",3]]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[]],[[["rgb",3]]],[[["lab",3]]],[[],["equations",3]],[[],["d75degree10",3]],[[],["take",3]],[[],["xyz",3]],[[],["lab",3]],[[],["range",3]],[[],["f2p2",3]],[[],["hsl",3]],[[],["yxy",3]],[[],["parameter",4]],[[],["d65",3]],[[],["prealpha",3]],[[],["linearfn",3]],[[],["linear",3]],[[],["d50degree10",3]],[[],["rgbhue",3]],[[],["d50",3]],[[],["f2",3]],[[],["gradient",3]],[[],["labhue",3]],[[],["equation",4]],[[],["slice",3]],[[],["d55",3]],[[],["e",3]],[[],["d55degree10",3]],[[],["f7",3]],[[],["hsv",3]],[[],["gammafn",3]],[[],["luma",3]],[[],["f11",3]],[[],["lch",3]],[[],["alpha",3]],[[],["c",3]],[[],["srgb",3]],[[],["b",3]],[[],["d65degree10",3]],[[],["hwb",3]],[[],["parameters",3]],[[],["a",3]],[[],["gamma",3]],[[],["rgb",3]],[[],["d75",3]],[[["xyz",3]],["xyz",3]],[[],["xyz",3]],[[["luma",3]],["luma",3]],[[],["luma",3]],[[["lab",3]],["lab",3]],[[],["lab",3]],[[["rgb",3]],["rgb",3]],[[],["rgb",3]],[[["alpha",3]],["alpha",3]],[[],["alpha",3]],[[["prealpha",3]],["prealpha",3]],[[],["prealpha",3]],[[["yxy",3]],["yxy",3]],[[],["yxy",3]],[[["xyz",3]]],[[]],[[]],[[]],[[["alpha",3]]],[[]],[[]],[[["luma",3]]],[[]],[[]],[[["rgb",3]]],[[["prealpha",3]]],[[["lab",3]]],[[["yxy",3]]],[[]],[[]],[[["button",3]],["bool",15]],[[["button",3]],["bool",15]],[[],["button",3]],[[["target",3]],["kludgine",3]],[[],[["points",3],["f32",15],["size2d",3]]],[[],[["f32",15],["pixels",3],["scale",3],["points",3]]],[[["str",15],["point2d",3],["f32",15],["textoptions",3],["points",3]]],[[["textoptions",3],["str",15]],[["textmetrics",3],["points",3]]],[[["strokeoptions",3],["rect",3]]],[[["f32",15],["alpha",3],["rgb",3],["rect",3]]],[[["strokeoptions",3],["f32",15],["point2d",3],["points",3]]],[[],["length",3]],[[],["length",3]],[[["length",3]]],[[["length",3]]],[[],["length",3]],[[],["length",3]],[[["length",3]]],[[["length",3]]],[[],["length",3]],[[],["length",3]],[[["length",3]]],[[["length",3]]],[[["color",3]],[["f32",15],["rgb",3],["alpha",3]]],[[["color",3]],["colorpair",3]],[[],[["point2d",3],["f32",15],["unknownunit",3]]],[[["point2d",3],["unknownunit",3]],[["point2d",3],["unknownunit",3]]],[[["vector2d",3],["unknownunit",3]],[["vector2d",3],["unknownunit",3]]],[[["point2d",3],["unknownunit",3]],[["point2d",3],["unknownunit",3]]],[[["vector2d",3],["unknownunit",3]],[["vector2d",3],["unknownunit",3]]],[[["point2d",3],["unknownunit",3]],[["point2d",3],["unknownunit",3]]],[[["vector2d",3],["unknownunit",3]],[["vector2d",3],["unknownunit",3]]],[[["point2d",3],["unknownunit",3]],[["point2d",3],["unknownunit",3]]],[[["vector2d",3],["unknownunit",3]],[["vector2d",3],["unknownunit",3]]],[[["gooey",3]],["rasterizer",3]],[[]],[[]],[[["typeid",3]],[["option",4],["anywidgetrasterizer",8]]],[[],[["option",4],["anywidgetrasterizer",8]]],[[],[["length",3],["f32",15]]],[[],[["length",3],["f32",15]]],[[],["angle",3]],[[]],[[],["angle",3]],[[]],[[],["angle",3]],[[],["angle",3]],[[["angle",3]],["angle",3]],[[["angle",3]],["angle",3]],[[]],[[],["angle",3]],[[],["angle",3]],[[],["angle",3]],[[],["angle",3]],[[],["angle",3]],[[],["angle",3]],[[],["angle",3]],[[],[["option",4],["angle",3]]],[[],[["angle",3],["f32",15]]],[[],[["f64",15],["angle",3]]],[[["point2d",3]],["box2d",3]],[[],["bool",15]],[[],["bool",15]],[[["box2d",3]],["bool",15]],[[["point2d",3]],["bool",15]],[[["box2d",3]],["bool",15]],[[],[["option",4],["box2d",3]]],[[["box2d",3]],[["option",4],["box2d",3]]],[[["box2d",3]],["box2d",3]],[[["box2d",3]],["box2d",3]],[[["vector2d",3]],["box2d",3]],[[],["size2d",3]],[[]],[[]],[[],["rect",3]],[[],["box2d",3]],[[["sideoffsets2d",3]],["box2d",3]],[[["sideoffsets2d",3]],["box2d",3]],[[["size2d",3]],["box2d",3]],[[],["box2d",3]],[[["box2d",3]],["box2d",3]],[[],["point2d",3]],[[]],[[],["box2d",3]],[[],[["box2d",3],["unknownunit",3]]],[[["box2d",3]],["box2d",3]],[[],["box2d",3]],[[],["box2d",3]],[[],["box2d",3]],[[],[["option",4],["box2d",3]]],[[],[["box2d",3],["f32",15]]],[[],[["f64",15],["box2d",3]]],[[],[["usize",15],["box2d",3]]],[[],[["box2d",3],["u32",15]]],[[],[["box2d",3],["i32",15]]],[[],[["i64",15],["box2d",3]]],[[],["box2d",3]],[[],["box2d",3]],[[],["box2d",3]],[[],["homogeneousvector",3]],[[],[["point2d",3],["option",4]]],[[],[["option",4],["point3d",3]]],[[],["length",3]],[[]],[[],["length",3]],[[["length",3]],["length",3]],[[["length",3]],["length",3]],[[["length",3]],["length",3]],[[],["length",3]],[[],[["option",4],["length",3]]],[[],["point2d",3]],[[],["point2d",3]],[[],["point2d",3]],[[["length",3]],["point2d",3]],[[],["point2d",3]],[[["unknownunit",3],["point2d",3]],["point2d",3]],[[],["point3d",3]],[[],["vector2d",3]],[[],["point2d",3]],[[],[["unknownunit",3],["point2d",3]]],[[],["point2d",3]],[[]],[[]],[[],["point3d",3]],[[],["point2d",3]],[[],["point2d",3]],[[],["point2d",3]],[[["point2d",3]],["point2d",3]],[[["point2d",3]],["point2d",3]],[[["point2d",3]],["point2d",3]],[[["point2d",3]],["point2d",3]],[[],["point2d",3]],[[],[["option",4],["point2d",3]]],[[],[["point2d",3],["f32",15]]],[[],[["f64",15],["point2d",3]]],[[],[["point2d",3],["usize",15]]],[[],[["u32",15],["point2d",3]]],[[],[["i32",15],["point2d",3]]],[[],[["i64",15],["point2d",3]]],[[["size2d",3]],["point2d",3]],[[["point2d",3]]],[[],["point3d",3]],[[],["point3d",3]],[[],["point3d",3]],[[["length",3]],["point3d",3]],[[],["point3d",3]],[[["point3d",3],["unknownunit",3]],["point3d",3]],[[],["vector3d",3]],[[],["point2d",3]],[[],["point2d",3]],[[],["point2d",3]],[[]],[[]],[[]],[[]],[[],[["point3d",3],["unknownunit",3]]],[[],["point3d",3]],[[],["point2d",3]],[[],["point3d",3]],[[],["point3d",3]],[[],["point3d",3]],[[["point3d",3]],["point3d",3]],[[["point3d",3]],["point3d",3]],[[["point3d",3]],["point3d",3]],[[["point3d",3]],["point3d",3]],[[],["point3d",3]],[[],[["option",4],["point3d",3]]],[[],[["point3d",3],["f32",15]]],[[],[["f64",15],["point3d",3]]],[[],[["usize",15],["point3d",3]]],[[],[["u32",15],["point3d",3]]],[[],[["i32",15],["point3d",3]]],[[],[["point3d",3],["i64",15]]],[[["size3d",3]],["point3d",3]],[[["point3d",3]]],[[],["scale",3]],[[],["scale",3]],[[["point2d",3]],["point2d",3]],[[["point3d",3]],["point3d",3]],[[["vector2d",3]],["vector2d",3]],[[["size2d",3]],["size2d",3]],[[["rect",3]],["rect",3]],[[["box2d",3]],["box2d",3]],[[["box3d",3]],["box3d",3]],[[],["bool",15]],[[]],[[],["scale",3]],[[],["scale",3]],[[],[["scale",3],["option",4]]],[[],["transform2d",3]],[[["transform2d",3]],["bool",15]],[[["transform2d",3]],["bool",15]],[[]],[[]],[[]],[[],["transform2d",3]],[[],["transform2d",3]],[[],[["transform2d",3],["unknownunit",3]]],[[["transform2d",3]],["transform2d",3]],[[],["transform2d",3]],[[],["transform2d",3]],[[],["transform3d",3]],[[],["transform2d",3]],[[],[["transform2d",3],["option",4]]],[[],["transform2d",3]],[[["transform2d",3]],["transform2d",3]],[[],["transform2d",3]],[[["vector2d",3]],["transform2d",3]],[[["vector2d",3]],["transform2d",3]],[[["angle",3]],["transform2d",3]],[[["angle",3]],["transform2d",3]],[[["angle",3]],["transform2d",3]],[[],["transform2d",3]],[[],["transform2d",3]],[[],["transform2d",3]],[[["point2d",3]],["point2d",3]],[[["vector2d",3]],["vector2d",3]],[[["rect",3]],["rect",3]],[[["box2d",3]],["box2d",3]],[[]],[[],["bool",15]],[[],[["transform2d",3],["option",4]]],[[],["transform3d",3]],[[],["transform3d",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["transform3d",3]],[[],["transform3d",3]],[[["transform3d",3]],["transform3d",3]],[[],[["transform3d",3],["unknownunit",3]]],[[],["transform3d",3]],[[],["transform3d",3]],[[],["transform2d",3]],[[],["transform3d",3]],[[["angle",3]],["transform3d",3]],[[],["transform3d",3]],[[["transform3d",3]],["transform3d",3]],[[],["transform3d",3]],[[["vector3d",3]],["transform3d",3]],[[["vector3d",3]],["transform3d",3]],[[["angle",3]],["transform3d",3]],[[["angle",3]],["transform3d",3]],[[["angle",3]],["transform3d",3]],[[],["transform3d",3]],[[],["transform3d",3]],[[],["transform3d",3]],[[["point2d",3]],["homogeneousvector",3]],[[["point2d",3]],[["option",4],["point2d",3]]],[[["vector2d",3]],["vector2d",3]],[[["point3d",3]],["homogeneousvector",3]],[[["point3d",3]],[["option",4],["point3d",3]]],[[["vector3d",3]],["vector3d",3]],[[["rect",3]],[["option",4],["rect",3]]],[[["box2d",3]],[["box2d",3],["option",4]]],[[["box3d",3]],[["box3d",3],["option",4]]],[[],["transform3d",3]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["transform3d",3]]],[[]],[[],["transform3d",3]],[[["scale",3]],["transform3d",3]],[[],["transform3d",3]],[[],["transform3d",3]],[[],[["transform3d",3],["option",4]]],[[["transform3d",3]],["bool",15]],[[["transform3d",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["boolvector2d",3]],["boolvector2d",3]],[[["boolvector2d",3]],["boolvector2d",3]],[[],["boolvector2d",3]],[[["point2d",3]],["point2d",3]],[[["vector2d",3]],["vector2d",3]],[[["size2d",3]],["size2d",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["boolvector3d",3]],["boolvector3d",3]],[[["boolvector3d",3]],["boolvector3d",3]],[[],["boolvector3d",3]],[[["point3d",3]],["point3d",3]],[[["vector3d",3]],["vector3d",3]],[[["size3d",3]],["size3d",3]],[[],["boolvector2d",3]],[[],["boolvector2d",3]],[[],["boolvector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[["angle",3]],["vector2d",3]],[[["length",3]],["vector2d",3]],[[["unknownunit",3],["vector2d",3]],["vector2d",3]],[[],["vector2d",3]],[[["vector2d",3]]],[[["vector2d",3]]],[[["vector2d",3]],["vector2d",3]],[[],["vector3d",3]],[[],["point2d",3]],[[],["vector2d",3]],[[],["size2d",3]],[[],[["unknownunit",3],["vector2d",3]]],[[],["vector2d",3]],[[]],[[]],[[],["vector3d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["angle",3]],[[],["transform2d",3]],[[]],[[["vector2d",3]],["vector2d",3]],[[["vector2d",3]],["angle",3]],[[]],[[],["vector2d",3]],[[],[["option",4],["vector2d",3]]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[["vector2d",3]],["vector2d",3]],[[["vector2d",3]],["vector2d",3]],[[["vector2d",3]],["vector2d",3]],[[["vector2d",3]],["vector2d",3]],[[["vector2d",3]],["vector2d",3]],[[["vector2d",3]],["boolvector2d",3]],[[["vector2d",3]],["boolvector2d",3]],[[["vector2d",3]],["boolvector2d",3]],[[["vector2d",3]],["boolvector2d",3]],[[],["vector2d",3]],[[],[["option",4],["vector2d",3]]],[[],[["vector2d",3],["f32",15]]],[[],[["f64",15],["vector2d",3]]],[[],[["usize",15],["vector2d",3]]],[[],[["u32",15],["vector2d",3]]],[[],[["i32",15],["vector2d",3]]],[[],[["i64",15],["vector2d",3]]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[["length",3]],["vector3d",3]],[[["vector3d",3],["unknownunit",3]],["vector3d",3]],[[],["vector3d",3]],[[["vector3d",3]]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[],["point3d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[],["vector2d",3]],[[]],[[]],[[]],[[]],[[],[["vector3d",3],["unknownunit",3]]],[[],["vector3d",3]],[[],["vector2d",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["transform3d",3]],[[]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["angle",3]],[[]],[[],["vector3d",3]],[[],[["vector3d",3],["option",4]]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["boolvector3d",3]],[[["vector3d",3]],["boolvector3d",3]],[[["vector3d",3]],["boolvector3d",3]],[[["vector3d",3]],["boolvector3d",3]],[[],["vector3d",3]],[[],[["option",4],["vector3d",3]]],[[],[["vector3d",3],["f32",15]]],[[],[["vector3d",3],["f64",15]]],[[],[["usize",15],["vector3d",3]]],[[],[["u32",15],["vector3d",3]]],[[],[["vector3d",3],["i32",15]]],[[],[["i64",15],["vector3d",3]]],[[["point3d",3]],["box3d",3]],[[],["bool",15]],[[],["bool",15]],[[["box3d",3]],["bool",15]],[[["point3d",3]],["bool",15]],[[["box3d",3]],["bool",15]],[[],[["option",4],["box3d",3]]],[[["box3d",3]],[["option",4],["box3d",3]]],[[["box3d",3]],["box3d",3]],[[["box3d",3]],["box3d",3]],[[["vector3d",3]],["box3d",3]],[[],["size3d",3]],[[]],[[]],[[]],[[],["box3d",3]],[[["size3d",3]],["box3d",3]],[[],["box3d",3]],[[["box3d",3]],["box3d",3]],[[],["point3d",3]],[[]],[[]],[[]],[[]],[[],["box3d",3]],[[],[["box3d",3],["unknownunit",3]]],[[["box3d",3]],["box3d",3]],[[],["box3d",3]],[[],["box3d",3]],[[],["box3d",3]],[[],[["box3d",3],["option",4]]],[[],[["box3d",3],["f32",15]]],[[],[["f64",15],["box3d",3]]],[[],[["usize",15],["box3d",3]]],[[],[["box3d",3],["u32",15]]],[[],[["box3d",3],["i32",15]]],[[],[["box3d",3],["i64",15]]],[[],["box3d",3]],[[],["box3d",3]],[[],["box3d",3]],[[["point2d",3],["size2d",3]],["rect",3]],[[],["rect",3]],[[["size2d",3]],["rect",3]],[[],["point2d",3]],[[],["point2d",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["range",3]],[[["vector2d",3]],["rect",3]],[[],["box2d",3]],[[["point2d",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["rect",3]],[["option",4],["rect",3]]],[[],["rect",3]],[[["rect",3]],["bool",15]],[[["sideoffsets2d",3]],["rect",3]],[[["sideoffsets2d",3]],["rect",3]],[[],["rect",3]],[[["rect",3]],["rect",3]],[[],["point2d",3]],[[["rect",3]],["rect",3]],[[],["rect",3]],[[]],[[],["bool",15]],[[],[["option",4],["rect",3]]],[[],[["rect",3],["unknownunit",3]]],[[["rect",3]],["rect",3]],[[],["rect",3]],[[],["rect",3]],[[],[["rect",3],["option",4]]],[[],[["rect",3],["f32",15]]],[[],[["f64",15],["rect",3]]],[[],[["usize",15],["rect",3]]],[[],[["u32",15],["rect",3]]],[[],[["u64",15],["rect",3]]],[[],[["rect",3],["i32",15]]],[[],[["rect",3],["i64",15]]],[[],["rect",3]],[[],["rect",3]],[[],["rect",3]],[[["rotation3d",3],["vector3d",3]],["rigidtransform3d",3]],[[],["rigidtransform3d",3]],[[],["rigidtransform3d",3]],[[["rotation3d",3],["vector3d",3]],["rigidtransform3d",3]],[[["rotation3d",3]],["rigidtransform3d",3]],[[["vector3d",3]],["rigidtransform3d",3]],[[]],[[["rigidtransform3d",3]],["rigidtransform3d",3]],[[],["rigidtransform3d",3]],[[],["transform3d",3]],[[],[["rigidtransform3d",3],["unknownunit",3]]],[[["rigidtransform3d",3]],["rigidtransform3d",3]],[[["angle",3]],["rotation2d",3]],[[],["rotation2d",3]],[[],["rotation2d",3]],[[],["rotation2d",3]],[[],[["rotation2d",3],["unknownunit",3]]],[[["rotation2d",3]],["rotation2d",3]],[[],["angle",3]],[[],["rotation3d",3]],[[],["rotation2d",3]],[[["rotation2d",3]],["rotation2d",3]],[[["point2d",3]],["point2d",3]],[[["vector2d",3]],["vector2d",3]],[[],["transform2d",3]],[[],["rotation3d",3]],[[],["rotation3d",3]],[[],[["vector3d",3],["unknownunit",3]]],[[],["rotation3d",3]],[[],[["unknownunit",3],["rotation3d",3]]],[[["rotation3d",3]],["rotation3d",3]],[[],["rotation3d",3]],[[["angle",3],["vector3d",3]],["rotation3d",3]],[[["angle",3]],["rotation3d",3]],[[["angle",3]],["rotation3d",3]],[[["angle",3]],["rotation3d",3]],[[["angle",3]],["rotation3d",3]],[[],["rotation3d",3]],[[]],[[]],[[],["rotation3d",3]],[[],["bool",15]],[[["rotation3d",3]],["rotation3d",3]],[[["rotation3d",3]],["rotation3d",3]],[[["point3d",3]],["point3d",3]],[[["point2d",3]],["point2d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector2d",3]],["vector2d",3]],[[],["transform3d",3]],[[["rotation3d",3]],["rotation3d",3]],[[],["sideoffsets2d",3]],[[["length",3]],["sideoffsets2d",3]],[[["vector2d",3]],["sideoffsets2d",3]],[[["vector2d",3]],["sideoffsets2d",3]],[[],["sideoffsets2d",3]],[[],["bool",15]],[[],["sideoffsets2d",3]],[[["length",3]],["sideoffsets2d",3]],[[]],[[]],[[],["size2d",3]],[[],["size2d",3]],[[["length",3]],["size2d",3]],[[],["size2d",3]],[[["size2d",3],["unknownunit",3]],["size2d",3]],[[]],[[]],[[],["vector2d",3]],[[],[["size2d",3],["unknownunit",3]]],[[],["size2d",3]],[[],["size2d",3]],[[],["size2d",3]],[[],["size2d",3]],[[]],[[["size2d",3]],["size2d",3]],[[],["size2d",3]],[[],[["size2d",3],["option",4]]],[[],[["size2d",3],["f32",15]]],[[],[["f64",15],["size2d",3]]],[[],[["usize",15],["size2d",3]]],[[],[["u32",15],["size2d",3]]],[[],[["size2d",3],["u64",15]]],[[],[["i32",15],["size2d",3]]],[[],[["i64",15],["size2d",3]]],[[],["size2d",3]],[[],["bool",15]],[[["size2d",3]],["size2d",3]],[[["size2d",3]],["size2d",3]],[[["size2d",3]],["size2d",3]],[[["size2d",3]],["bool",15]],[[["size2d",3]],["boolvector2d",3]],[[["size2d",3]],["boolvector2d",3]],[[],["bool",15]],[[["size2d",3]],["boolvector2d",3]],[[["size2d",3]],["boolvector2d",3]],[[],["size3d",3]],[[],["size3d",3]],[[["length",3]],["size3d",3]],[[],["size3d",3]],[[["size3d",3],["unknownunit",3]],["size3d",3]],[[]],[[]],[[],["vector3d",3]],[[],[["size3d",3],["unknownunit",3]]],[[],["size3d",3]],[[],["size3d",3]],[[],["size3d",3]],[[],["size3d",3]],[[]],[[["size3d",3]],["size3d",3]],[[],["size3d",3]],[[],[["option",4],["size3d",3]]],[[],[["size3d",3],["f32",15]]],[[],[["size3d",3],["f64",15]]],[[],[["usize",15],["size3d",3]]],[[],[["u32",15],["size3d",3]]],[[],[["i32",15],["size3d",3]]],[[],[["i64",15],["size3d",3]]],[[],["size3d",3]],[[],["bool",15]],[[["size3d",3]],["size3d",3]],[[["size3d",3]],["size3d",3]],[[["size3d",3]],["size3d",3]],[[["size3d",3]],["bool",15]],[[["size3d",3]],["boolvector3d",3]],[[["size3d",3]],["boolvector3d",3]],[[],["bool",15]],[[["size3d",3]],["boolvector3d",3]],[[["size3d",3]],["boolvector3d",3]],[[],["translation2d",3]],[[],["translation2d",3]],[[],["translation2d",3]],[[],["bool",15]],[[["size2d",3]],["size2d",3]],[[],["vector2d",3]],[[]],[[]],[[],[["translation2d",3],["unknownunit",3]]],[[["translation2d",3]],["translation2d",3]],[[],["transform2d",3]],[[["point2d",3]],["point2d",3]],[[["rect",3]],["rect",3]],[[["box2d",3]],["box2d",3]],[[],["translation2d",3]],[[],["translation3d",3]],[[],["translation3d",3]],[[],["translation3d",3]],[[],["bool",15]],[[["size2d",3]],["size2d",3]],[[],["vector3d",3]],[[]],[[]],[[],[["translation3d",3],["unknownunit",3]]],[[["translation3d",3]],["translation3d",3]],[[],["transform3d",3]],[[["point3d",3]],["point3d",3]],[[["point2d",3]],["point2d",3]],[[["box2d",3]],["box2d",3]],[[["box3d",3]],["box3d",3]],[[["rect",3]],["rect",3]],[[],["translation3d",3]],[[],["style",3]],[[]],[[],["style",3]],[[],["option",4]],[[]],[[["style",3],["bool",15]],["style",3]],[[["f32",15],["pixels",3],["scale",3],["points",3]],[["pixels",3],["style",3]]],[[]],[[["bool",15],["stylesheet",3]],["stylesheet",3]],[[],["stylesheet",3]],[[],["option",4]],[[["f32",15]],["colorpair",3]],[[["systemtheme",4]],[["f32",15],["rgb",3],["alpha",3]]],[[["f32",15]],["fontsize",3]],[[],["f32",15]],[[],[["f32",15],["length",3]]],[[],["u16",15]],[[["equation",4]],["equations",3]],[[["parameter",4]],["equations",3]],[[],["gradient",3]],[[["vec",3],["global",3]],["gradient",3]],[[]],[[["usize",15]],["take",3]],[[],["slice",3]],[[]],[[]],[[["usize",15]],["take",3]],[[],["slice",3]],[[]],[[],["luma",3]],[[],["luma",3]],[[["luma",3]],["luma",3]],[[]],[[],["luma",3]],[[],[["linear",3],["luma",3]]],[[["linear",3],["luma",3]],["luma",3]],[[],["luma",3]],[[["luma",3]],["luma",3]],[[],["rgb",3]],[[],["rgb",3]],[[["rgb",3]],["rgb",3]],[[]],[[],["rgb",3]],[[],[["linear",3],["rgb",3]]],[[["linear",3],["rgb",3]],["rgb",3]],[[],["rgb",3]],[[["rgb",3]],["rgb",3]],[[],[["alpha",3],["hsl",3]]],[[],[["alpha",3],["hsl",3]]],[[]],[[],[["alpha",3],["hsl",3]]],[[],[["alpha",3],["hsv",3]]],[[],[["alpha",3],["hsv",3]]],[[]],[[],[["alpha",3],["hsv",3]]],[[],[["alpha",3],["hwb",3]]],[[],[["hwb",3],["alpha",3]]],[[]],[[],[["hwb",3],["alpha",3]]],[[],[["lab",3],["alpha",3]]],[[],[["lab",3],["alpha",3]]],[[]],[[],[["lab",3],["alpha",3]]],[[],[["alpha",3],["lch",3]]],[[],[["alpha",3],["lch",3]]],[[]],[[],[["alpha",3],["lch",3]]],[[],[["alpha",3],["luma",3]]],[[],[["luma",3],["alpha",3]]],[[["luma",3],["alpha",3]],[["alpha",3],["luma",3]]],[[]],[[],[["alpha",3],["luma",3]]],[[],[["luma",3],["alpha",3]]],[[["alpha",3],["luma",3]],[["alpha",3],["luma",3]]],[[],[["luma",3],["alpha",3]]],[[["luma",3],["alpha",3]],[["alpha",3],["luma",3]]],[[],[["rgb",3],["alpha",3]]],[[],[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]],[["rgb",3],["alpha",3]]],[[]],[[],[["rgb",3],["alpha",3]]],[[],[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]],[["rgb",3],["alpha",3]]],[[],[["rgb",3],["alpha",3]]],[[["rgb",3],["alpha",3]],[["rgb",3],["alpha",3]]],[[],[["alpha",3],["xyz",3]]],[[],[["alpha",3],["xyz",3]]],[[]],[[],[["alpha",3],["xyz",3]]],[[],[["alpha",3],["yxy",3]]],[[],[["alpha",3],["yxy",3]]],[[]],[[],[["alpha",3],["yxy",3]]],[[],[["srgb",3],["hsl",3]]],[[],["hsl",3]],[[]],[[],["hsl",3]],[[],[["srgb",3],["hsv",3]]],[[],["hsv",3]],[[]],[[],["hsv",3]],[[],[["srgb",3],["hwb",3]]],[[],["hwb",3]],[[]],[[],["hwb",3]],[[],[["lab",3],["d65",3]]],[[],["lab",3]],[[]],[[],["lab",3]],[[],[["d65",3],["lch",3]]],[[],["lch",3]],[[]],[[],["lch",3]],[[],[["d65",3],["xyz",3]]],[[],["xyz",3]],[[]],[[],["xyz",3]],[[],[["d65",3],["yxy",3]]],[[],["yxy",3]],[[]],[[],["yxy",3]],[[]],[[],["labhue",3]],[[],["labhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rgbhue",3]],[[],["rgbhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gooey",3]],[[],["anywidget",8]]],"p":[[8,"WidgetRasterizer"],[8,"AnyWidgetRasterizer"],[8,"Renderer"],[3,"TextOptions"],[3,"StrokeOptions"],[3,"TextMetrics"],[8,"ApproxEq"],[8,"Zero"],[8,"One"],[8,"Round"],[8,"Floor"],[8,"Ceil"],[3,"Angle"],[3,"Box2D"],[3,"HomogeneousVector"],[3,"Length"],[3,"Point2D"],[3,"Point3D"],[3,"Scale"],[3,"Transform2D"],[3,"Transform3D"],[3,"BoolVector2D"],[3,"BoolVector3D"],[3,"Vector2D"],[3,"Vector3D"],[3,"Box3D"],[3,"Rect"],[3,"RigidTransform3D"],[3,"Rotation2D"],[3,"Rotation3D"],[3,"SideOffsets2D"],[3,"Size2D"],[3,"Size3D"],[3,"Translation2D"],[3,"Translation3D"],[8,"Trig"],[8,"StyleComponent"],[8,"UnscaledStyleComponent"],[3,"StyleSheet"],[4,"GenericStyle"],[4,"Alignment"],[4,"VerticalAlignment"],[8,"AnyStyleComponent"],[3,"BackgroundColor"],[3,"ColorPair"],[3,"ForegroundColor"],[4,"SystemTheme"],[3,"FontFamily"],[3,"FontSize"],[4,"FontStyle"],[4,"Weight"],[8,"BlendFunction"],[4,"Equation"],[3,"Equations"],[4,"Parameter"],[3,"Parameters"],[3,"PreAlpha"],[8,"Blend"],[8,"LumaStandard"],[3,"Luma"],[8,"RgbStandard"],[8,"RgbSpace"],[8,"Primaries"],[3,"Rgb"],[4,"Method"],[3,"ConeResponseMatrices"],[8,"TransformMatrix"],[8,"AdaptFrom"],[8,"AdaptInto"],[8,"Number"],[8,"Pixel"],[8,"RawPixel"],[8,"RawPixelSized"],[8,"TransferFn"],[8,"WhitePoint"],[8,"Float"],[8,"Limited"],[8,"Mix"],[8,"Shade"],[8,"GetHue"],[8,"Hue"],[8,"Saturate"],[8,"ComponentWise"],[8,"Component"],[3,"Alpha"],[3,"Hsl"],[3,"Hsv"],[3,"Hwb"],[3,"Lab"],[3,"Lch"],[3,"Xyz"],[3,"Yxy"],[8,"ConvertFrom"],[8,"ConvertInto"],[8,"FromColor"],[8,"IntoColor"],[8,"AnyWidget"],[8,"Widget"],[8,"Transmogrifier"],[3,"Button"],[4,"ButtonEvent"],[3,"Kludgine"],[3,"Rasterizer"],[3,"UnknownUnit"],[3,"Pixels"],[3,"Points"],[3,"Style"],[3,"ComponentCollection"],[3,"Gradient"],[3,"Take"],[3,"Slice"],[3,"Range"],[3,"Srgb"],[3,"Gamma"],[3,"GammaFn"],[3,"F2p2"],[3,"Linear"],[3,"LinearFn"],[3,"A"],[3,"B"],[3,"C"],[3,"D50"],[3,"D55"],[3,"D65"],[3,"D75"],[3,"E"],[3,"F2"],[3,"F7"],[3,"F11"],[3,"D50Degree10"],[3,"D55Degree10"],[3,"D65Degree10"],[3,"D75Degree10"],[3,"OutOfBounds"],[3,"LabHue"],[3,"RgbHue"],[3,"Gooey"],[3,"ButtonTransmogrifier"]]},\
"gooey_browser":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"gooey_core":{"doc":"Core traits and types used to create Graphical User …","t":[0,8,10,10,10,10,10,10,10,3,12,12,3,12,12,3,12,12,12,12,11,11,8,3,8,16,8,16,16,10,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["renderer","Renderer","size","scale","render_text","measure_text","stroke_rect","fill_rect","stroke_line","TextOptions","font_family","text_size","StrokeOptions","color","line_width","TextMetrics","width","ascent","descent","line_gap","height","line_height","Frontend","Gooey","Widget","TransmogrifierEvent","Transmogrifier","Widget","Context","content_size","AnyWidget","as_any","widget_type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","default","div","mul","new","root_widget"],"q":["gooey_core","gooey_core::renderer","","","","","","","","","","","","","","","","","","","","","gooey_core","","","","","","","","","","","","","","","","","","","","","","gooey_core::renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gooey_core",""],"d":["Types used for drawing.","Implements drawing APIs.","The size of the area being drawn.","The scale when converting between [<code>Points</code>] and [<code>Pixels</code>].","Renders <code>text</code> at <code>baseline_origin</code> with <code>options</code>.","Measures <code>text</code> using <code>options</code>.","Strokes the outline of <code>rect</code> using <code>options</code>.","Fills <code>rect</code> using <code>color</code>.","Draws a line between <code>point_a</code> and <code>point_b</code> using <code>options</code>.","Text rendering and measurement options.","The font family to use.","The text size, in [<code>Points</code>].","Shape outline drawing options.","The color to stroke.","The width of each line segment.","A measurement of text.","The width of the text.","The height above the baseline.","The height below the baseline. Typically a negative …","The spacing expected between lines of text.","The height of the rendered text. This is computed by …","The height of a line of text. This is computed by …","A frontend is an implementation of widgets and layouts.","A graphical user interface.","A graphical user interface element.","The type of the event that any [<code>Transmogrifier</code>] for this …","Transforms a Widget into whatever is needed for [<code>Frontend</code>]…","The type of the widget being transmogrified.","The frontend-specific context type provided to aide in …","Calculate the content-size needed for this <code>widget</code>, trying …","A Widget without any associated types. Useful for …","Returns the widget as the [<code>Any</code>] type.","Returns the [<code>TypeId</code>] of the widget.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a user interface using <code>root</code>.","Returns the root widget."],"i":[0,0,1,1,1,1,1,1,1,0,2,2,0,3,3,0,4,4,4,4,4,4,0,0,0,5,0,6,6,6,0,7,7,8,8,8,8,8,8,8,8,8,8,8,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,2,4,4,8,8],"f":[null,null,[[],[["points",3],["f32",15],["size2d",3]]],[[],[["pixels",3],["points",3],["scale",3],["f32",15]]],[[["point2d",3],["textoptions",3],["f32",15],["points",3],["str",15]]],[[["textoptions",3],["str",15]],[["points",3],["textmetrics",3]]],[[["strokeoptions",3],["rect",3]]],[[["srgba",6],["rect",3]]],[[["points",3],["f32",15],["strokeoptions",3],["point2d",3]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["length",3],["f32",15]]],[[],[["length",3],["f32",15]]],null,null,null,null,null,null,null,[[["option",4],["size2d",3],["points",3]],[["points",3],["f32",15],["size2d",3]]],null,[[],["any",8]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[["scale",3],["f32",15]]],[[["scale",3],["f32",15]]],[[["widget",8]]],[[],["anywidget",8]]],"p":[[8,"Renderer"],[3,"TextOptions"],[3,"StrokeOptions"],[3,"TextMetrics"],[8,"Widget"],[8,"Transmogrifier"],[8,"AnyWidget"],[3,"Gooey"]]},\
"gooey_kludgine":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Kludgine","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","downcast","upcast","init","deref","deref_mut","drop","from","size","scale","render_text","measure_text","stroke_rect","fill_rect","stroke_line"],"q":["gooey_kludgine","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[],["option",4]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["target",3]]],[[],[["points",3],["size2d",3],["f32",15]]],[[],[["points",3],["pixels",3],["f32",15],["scale",3]]],[[["points",3],["point2d",3],["f32",15],["textoptions",3],["str",15]]],[[["textoptions",3],["str",15]],[["points",3],["textmetrics",3]]],[[["strokeoptions",3],["rect",3]]],[[["srgba",6],["rect",3]]],[[["points",3],["f32",15],["strokeoptions",3],["point2d",3]]]],"p":[[3,"Kludgine"]]},\
"gooey_rasterizer":{"doc":"","t":[3,11,11,11,11,11,8,10,8,10,11,11,11,11,11,11,11,11,11,11,11],"n":["Rasterizer","new","render","register_transmogrifier","transmogrifier","root_transmogrifier","WidgetRasterizer","render","AnyWidgetRasterizer","render","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into"],"q":["gooey_rasterizer","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,0,2,0,3,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["gooey",3]]],[[]],[[["widgetrasterizer",8]]],[[["typeid",3]],[["anywidgetrasterizer",8],["option",4]]],[[],[["anywidgetrasterizer",8],["option",4]]],null,[[["points",3],["rect",3],["f32",15]]],null,[[["points",3],["anywidget",8],["rect",3],["f32",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]]],"p":[[3,"Rasterizer"],[8,"WidgetRasterizer"],[8,"AnyWidgetRasterizer"]]},\
"gooey_widgets":{"doc":"","t":[0,3,12,12,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["button","Button","label","disabled","ButtonEvent","Clicked","ButtonTransmogrifier","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","as_any","widget_type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","clone","eq","ne"],"q":["gooey_widgets","gooey_widgets::button","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,1,1,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["any",8]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["button",3]],[[["button",3]],["bool",15]],[[["button",3]],["bool",15]]],"p":[[3,"Button"],[4,"ButtonEvent"],[3,"ButtonTransmogrifier"]]}\
}');
initSearch(searchIndex);